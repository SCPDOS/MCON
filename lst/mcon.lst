     1                                  [map all ./lst/mcon.map]
     2                                  DEFAULT REL
     3                                  BITS 64
     4                                  
     5                                  %include "./src/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvStopCon      equ 20  ; NEW MULTITASKING 
    38                              <1>     drvRestartCon   equ 21  ; NEW MULTITASKING
    39                              <1>     drvGETDRVMAP    equ 23
    40                              <1>     drvSETDRVMAP    equ 24
    41                              <1>     
    42                              <1> ;Driver Error equates 
    43                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    44                              <1>     drvBadUnit      equ 1   ;Unknown unit
    45                              <1>     drvNotReady     equ 2   ;Device not ready
    46                              <1>     drvBadCmd       equ 3   ;Unknown command
    47                              <1>     drvCRCErr       equ 4   ;CRC Error
    48                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    49                              <1>     drvBadSeek      equ 6   ;Seek error
    50                              <1>     drvBadMed       equ 7   ;Unknown media
    51                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    52                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    53                              <1>     drvWriteFault   equ 10  ;Write Fault
    54                              <1>     drvReadFault    equ 11  ;Read Fault
    55                              <1>     drvGenFault     equ 12  ;General Fault
    56                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    57                              <1> 
    58                              <1> ;Driver status word status bit meanings
    59                              <1>     drvErrStatus    equ 8000h  
    60                              <1>     drvDonStatus    equ 0100h
    61                              <1>     drvBsyStatus    equ 0200h
    62                              <1> 
    63                              <1> ;Driver Attribute Word bit meanings
    64                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    65                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    66                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    67                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    68                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    69                              <1>     devDrvMulti    equ 20h ;Reserved, If set, device is multitasking. 
    70                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    71                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    72                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    73                              <1>     devDrvChar     equ 8000h ;If set, Char device
    74                              <1> ;Bit 0 1=console input
    75                              <1> ;    1 1=console output (character devices)
    76                              <1> ;    2 1=NUL device
    77                              <1> ;    3 1=CLOCK device
    78                              <1> ;    4 1=Int 29 output (CON)
    79                              <1> ;    5 1=Multitasking driver. Bit ignored by DOS. Used by multitaskers.
    80                              <1> ; If bit set, no crit2 lock placed on thread when making drv request.
    81                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    82                              <1> ;    7 1=Generic IOCTL function supported (19)
    83                              <1> ;   11 1=open/close/removable media supported (3.0+)
    84                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    85                              <1> ;      1=media descriptor in FAT required (block devices)
    86                              <1> ;   14 1=IOCTL R/W supported
    87                              <1> ;   15 0=block device
    88                              <1> ;      1=character device
    89                              <1> 
    90                              <1> ;Driver structures
    91                              <1> 
    92                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    93                              <1> 
    94                              <1>     .hdrlen db ?  ;Length of the request header
    95                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    96                              <1>     .cmdcde db ?  ;Command code
    97                              <1>     .status dw ?  ;Status word
    98                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    99                              <1> 
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> struc drvReqHdr
   103                              <1>     drvReqHdrM
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   104                              <1> endstruc
   105                              <1> 
   106                              <1> struc initReqPkt  ;Init Request Packet
   107                              <1> 
   108                              <1>     drvReqHdrM   ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   109 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   110 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   111 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   112 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   113                              <1> 
   114                              <1> endstruc
   115                              <1> 
   116                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   117                              <1> 
   118                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   119 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   120 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   121 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   122                              <1> 
   123                              <1> endstruc
   124                              <1> 
   125                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   126                              <1> 
   127                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   128 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   129 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   130 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   131                              <1> 
   132                              <1> endstruc
   133                              <1> 
   134                              <1> struc ioReqPkt   ;IO Request Packet
   135                              <1> 
   136                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   137 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   138 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   139 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   140 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   141 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   142                              <1> 
   143                              <1> endstruc
   144                              <1> 
   145                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   146                              <1>     
   147                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   148 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   149                              <1> 
   150                              <1> endstruc
   151                              <1> 
   152                              <1> struc statusReqPkt   ;Status Request Packet
   153                              <1> 
   154                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   155                              <1> 
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   159                              <1> 
   160                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   161                              <1>      
   162                              <1> endstruc
   163                              <1> 
   164                              <1> struc openReqPkt ;Open Device Request Packet
   165                              <1> 
   166                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   167                              <1>      
   168                              <1> endstruc
   169                              <1> 
   170                              <1> struc closeReqPkt ;Close Device Request Packet
   171                              <1> 
   172                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   173                              <1>      
   174                              <1> endstruc
   175                              <1> 
   176                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   177                              <1> 
   178                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   179                              <1>      
   180                              <1> endstruc
   181                              <1> 
   182                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   183                              <1> 
   184                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   185 0000000D ??                  <1>     .majfun db ?  ;Major function number
   186 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   187 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   188 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   189 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   190                              <1> 
   191                              <1> endstruc
   192                              <1> 
   193                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   194                              <1>     
   195                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   196                              <1> 
   197                              <1> endstruc
   198                              <1> 
   199                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   200                              <1>     
   201                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen db ?
    95 00000001 ??                  <2>  .unitnm db ?
    96 00000002 ??                  <2>  .cmdcde db ?
    97 00000003 ????                <2>  .status dw ?
    98 00000005 ????????????????    <2>  .devptr dq ?
    99                              <2> 
   202                              <1> 
   203                              <1> endstruc
   204                              <1> 
   205                              <1> 
   206                              <1> struc genioctlGetParamsTable
   207 00000000 ??                  <1>     .size           db ?
   208 00000001 ??????????????      <1>     .res            db 7 dup (?)
   209 00000008 ????????????????    <1>     .sectorSize     db 8 dup (?)  ;Only the lower dword is valid here
   210 00000010 ????????????????    <1>     .numSectors     db 8 dup (?)
   211                              <1> endstruc
   212                              <1> 
   213                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   214                              <1> struc genioctlLBAformat
   215 00000000 ??                  <1>     .size           db ?
   216 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to format
   217 00000002 ????????????        <1>     .res            db 6 dup (?)
   218 00000008 ????????????????    <1>     .startSector    db 8 dup (?)  ;Sector to start format at
   219                              <1> endstruc
   220                              <1> 
   221                              <1> struc genioctlLBAwrite
   222 00000000 ??                  <1>     .size           db ?
   223 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to write
   224 00000002 ????????????        <1>     .res            db 6 dup (?)
   225 00000008 ????????????????    <1>     .startSector    db 8 dup (?)  ;Sector to start write at
   226 00000010 ????????????????    <1>     .xferBuffer     db 8 dup (?)  ;Transfer buffer for data
   227                              <1> endstruc
     6                                  %include "./src/mcon.inc"
     1                              <1> ;MCON screen capabilities
     2                              <1> 
     3                              <1> struc mScrCap
     4 00000000 ????                <1>     .wVer       dw ?    ;Upper byte, Major num (1). Lower byte, minor num (0)
     5 00000002 ????                <1>     .wLen       dw ?    ;Length of structure (15 bytes)
     6 00000004 ????                <1>     .wMagic     dw ?    ;Magic key combo (scancode/ASCII)
     7 00000006 ??                  <1>     .bScrNum    db ?    ;Number of screens supported by driver
     8 00000007 ????????????????    <1>     .qHlpPtr    dq ?    ;Pointer to the mCon help routine
     9                              <1> endstruc
    10                              <1> 
    11                              <1> maxScr  equ 07h ;Screens 0 - 7 (so 8 screens)
     7                                  %include "./src/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1>     ret
    14                              <1> %endmacro
    15                              <1> 
    16                              <1> %macro cret 1
    17                              <1>     j%-1 short %%a
    18                              <1>     return
    19                              <1> %%a:
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> %macro retz 0
    23                              <1> cret z
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> %macro retnz 0
    27                              <1> cret nz
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> %macro rete 0
    31                              <1> cret e
    32                              <1> %endmacro
    33                              <1> 
    34                              <1> %macro retne 0
    35                              <1> cret ne
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> %macro retc 0
    39                              <1> cret c
    40                              <1> %endmacro
    41                              <1> 
    42                              <1> %macro retnc 0
    43                              <1> cret nc
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retb 0
    47                              <1> cret b
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnb 0
    51                              <1> cret nb
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro reta 0
    55                              <1> cret a
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retna 0
    59                              <1> cret na
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro breakpoint 0
    63                              <1> xchg bx, bx
    64                              <1> %endmacro
     8                                  
     9                                  Segment cseg start=0 vstart=0
    10                                  %include "./src/mcdata.asm" ;Cannot put this in a separate segment due to reloc issues
     1                              <1> 
     2                              <1> ;Driver version number
     3                              <1> vers equ 0
     4                              <1> rev  equ 1
     5                              <1> 
     6                              <1> conHdr:
     7 00000000 FFFFFFFFFFFFFFFF    <1>     dq -1
     8 00000008 7380                <1>     dw devDrvChar | devDrvIOCTL | devDrvMulti | devDrvFastOut | devDrvConOut | devDrvConIn
     9 0000000A [5E00000000000000]  <1>     dq strategy
    10 00000012 [9D00000000000000]  <1>     dq noOp    ;We don't use the interrupt endpoint.
    11 0000001A 434F4E2020202020    <1>     db "CON     "
    12 00000022 00                  <1> conBuf  db 0    ;Single byte input buffer
    13 00000023 [9D00000000000000]  <1> hlpPtr  dq noOp ;Ptr to the DOS session help interface. Default to NOP
    14                              <1> 
    15                              <1> funcTbl:
    16 0000002B 8102                <1>     dw init - funcTbl       ;Init function
    17 0000002D 7200                <1>     dw noOp - funcTbl       ;Media Check
    18 0000002F 7200                <1>     dw noOp - funcTbl       ;Build BPB
    19 00000031 7300                <1>     dw unkExit - funcTbl    ;IOCTL Input
    20 00000033 8000                <1>     dw read - funcTbl       ;Read
    21 00000035 CC00                <1>     dw ndRead - funcTbl     ;Non-destructive read
    22 00000037 0001                <1>     dw inStatus - funcTbl   ;Input Status
    23 00000039 0D01                <1>     dw flushInBuf - funcTbl ;Input flush
    24 0000003B 2D01                <1>     dw write - funcTbl      ;Write
    25 0000003D 2D01                <1>     dw write - funcTbl      ;Write with verify
    26 0000003F 7200                <1>     dw noOp - funcTbl       ;Output Status
    27 00000041 7200                <1>     dw noOp - funcTbl       ;Output Flush
    28 00000043 7200                <1>     dw noOp - funcTbl       ;IOCTL Output
    29 00000045 7200                <1>     dw noOp - funcTbl       ;Device Open
    30 00000047 7200                <1>     dw noOp - funcTbl       ;Device Close
    31 00000049 7200                <1>     dw noOp - funcTbl       ;Removable Media
    32 0000004B 7300                <1>     dw unkExit - funcTbl    ;Reserved function
    33 0000004D 7300                <1>     dw unkExit - funcTbl    ;Reserved function
    34 0000004F 7300                <1>     dw unkExit - funcTbl    ;Reserved function
    35                              <1> ; New functions
    36 00000051 5101                <1>     dw genIOCTL - funcTbl   ;Generic IOCTL
    37                              <1> 
    38                              <1> funcTblE equ ($ - funcTbl)/2    ;Compute number of entries
    39                              <1> 
    40 00000053 0000000000000000    <1> oldKbdHdlr  dq 0    ;Ptr to the BIOS IRQ1 handler
    41 0000005B FFFF                <1> magicKey    dw -1   ;Scancode/ASCII pair to search for. -1 means no search.
    42 0000005D 00                  <1> inHdlr      db 0    ;Set if we are in the getchar portion of IRQ1 handler.
    11                                  %include "./src/mccode.asm"
     1                              <1> ;This driver is designed to work in the MDOS environment. 
     2                              <1> 
     3                              <1> strategy:
     4                              <1> ;DOS calls this function with rbx=Ptr to request header.
     5                              <1> ;Rather than saving the 
     6 0000005E 50                  <1>     push rax
     7 0000005F 53                  <1>     push rbx
     8 00000060 51                  <1>     push rcx
     9 00000061 52                  <1>     push rdx
    10 00000062 56                  <1>     push rsi
    11 00000063 57                  <1>     push rdi
    12 00000064 55                  <1>     push rbp
    13 00000065 4150                <1>     push r8 ;Use r8 as the static pointer to the request packet!
    14 00000067 4989D8              <1>     mov r8, rbx 
    15 0000006A 6641C740030000      <1>     mov word [r8 + drvReqHdr.status], 0    ;Ensure status clear (should be!)
    16 00000071 410FB64002          <1>     movzx eax, byte [r8 + drvReqHdr.cmdcde]
    17 00000076 3D14000000          <1>     cmp eax, funcTblE   
    18 0000007B 7321                <1>     jae short unkExit       ;If cmdcde is past the end of the table, error!
    19 0000007D 488D1DA7FFFFFF      <1>     lea rbx, funcTbl        ;Else get pointer to function
    20 00000084 0FB71443            <1>     movzx edx, word [rbx + 2*rax]   
    21 00000088 4801D3              <1>     add rbx, rdx
    22 0000008B FFD3                <1>     call rbx        
    23                              <1> exit:
    24 0000008D 66418148030001      <1>     or word [r8 + drvReqHdr.status], drvDonStatus    ;Set done bit!
    25                              <1> .err:
    26 00000094 4158                <1>     pop r8
    27 00000096 5D                  <1>     pop rbp
    28 00000097 5F                  <1>     pop rdi
    29 00000098 5E                  <1>     pop rsi
    30 00000099 5A                  <1>     pop rdx
    31 0000009A 59                  <1>     pop rcx
    32 0000009B 5B                  <1>     pop rbx
    33 0000009C 58                  <1>     pop rax
    34                              <1> noOp:
    35                              <1>     return
    13 0000009D C3                  <2>  ret
    36                              <1> 
    37                              <1> unkExit:
    38 0000009E B003                <1>     mov al, drvBadCmd
    39                              <1> errorExit:
    40                              <1> ;Jump to with al=Standard Error code
    41 000000A0 66B80080            <1>     mov ax, drvErrStatus    ;Set error bit, and NOT done bit!
    42 000000A4 6641894003          <1>     mov word [r8 + drvReqHdr.status], ax
    43 000000A9 EBE9                <1>     jmp short exit.err
    44                              <1> 
    45                              <1> read:    ;Read Chars
    46 000000AB B005                <1>     mov al, 05h ;Bad request structure length?
    47 000000AD 4180382A            <1>     cmp byte [r8 + drvReqHdr.hdrlen], ioReqPkt_size
    48 000000B1 75ED                <1>     jne errorExit
    49                              <1> 
    50 000000B3 498B780E            <1>     mov rdi, qword [r8 + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    51 000000B7 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    52                              <1> .cre1:
    53 000000B9 413B4816            <1>     cmp ecx, dword [r8 + ioReqPkt.tfrlen]
    54 000000BD 7424                <1>     je .cre2
    55 000000BF 803D5CFFFFFF00      <1>     cmp byte [conBuf], 0   ;Does the buffer contain a zero?
    56 000000C6 7520                <1>     jnz .cre3   ;No, get the buffer value
    57 000000C8 31C0                <1>     xor eax, eax
    58 000000CA CD36                <1>     int 36h
    59 000000CC 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr? 
    60 000000D0 7502                <1>     jne .cre11
    61 000000D2 B010                <1>     mov al, 10h     ;Store ^P in al!
    62                              <1> .cre11:
    63 000000D4 AA                  <1>     stosb
    64 000000D5 84C0                <1>     test al, al ;Was the ascii code stored 0?
    65 000000D7 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    66 000000D9 882543FFFFFF        <1>     mov byte [conBuf], ah  ;Save scancode
    67                              <1> .cre12:
    68 000000DF FFC1                <1>     inc ecx ;Inc chars stored in buffer
    69 000000E1 EBD6                <1>     jmp short .cre1
    70                              <1> .cre2:
    71 000000E3 41894816            <1>     mov dword [r8 + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    72                              <1>     return
    13 000000E7 C3                  <2>  ret
    73                              <1> .cre3:
    74 000000E8 8A0534FFFFFF        <1>     mov al, byte [conBuf]  ;Get the buffer value
    75 000000EE C6052DFFFFFF00      <1>     mov byte [conBuf], 0   ;Reset the buffer value
    76 000000F5 EBDD                <1>     jmp short .cre11
    77                              <1> 
    78                              <1> ndRead:  ;Non destructive read chars
    79 000000F7 B005                <1>     mov al, 05h ;Bad request structure length?
    80 000000F9 4180380E            <1>     cmp byte [r8 + drvReqHdr.hdrlen], ndInNoWaitPkt_size
    81 000000FD 75A1                <1>     jne errorExit
    82 000000FF 803D1CFFFFFF00      <1>     cmp byte [conBuf], 0
    83 00000106 751B                <1>     jnz .cnr2
    84 00000108 B401                <1>     mov ah, 01h     ;Get key if exists
    85 0000010A CD36                <1>     int 36h
    86 0000010C 740D                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    87                              <1>     ;Keystroke available
    88 0000010E 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr?
    89 00000112 7502                <1>     jne .cnr0
    90 00000114 B010                <1>     mov al, 10h     ;Report ^P
    91                              <1> .cnr0:
    92 00000116 4188400D            <1>     mov byte [r8 + ndInNoWaitPkt.retbyt], al   ;Move char in al
    93                              <1>     return
    13 0000011A C3                  <2>  ret
    94                              <1> .cnr1: ;No keystroke available
    95 0000011B 6641C740030002      <1>     mov word [r8 + ndInNoWaitPkt.status], drvBsyStatus   ;Set busy bit
    96                              <1>     return
    13 00000122 C3                  <2>  ret
    97                              <1> .cnr2:
    98 00000123 8A05F9FEFFFF        <1>     mov al, byte [conBuf]  ;Copy scancode but dont reset it
    99 00000129 EBEB                <1>     jmp short .cnr0   ;Keystroke is available clearly
   100                              <1> 
   101                              <1> inStatus:         ;Get Input Status
   102 0000012B B005                <1>     mov al, 05h ;Bad request structure length?
   103 0000012D 4180380D            <1>     cmp byte [r8 + drvReqHdr.hdrlen], statusReqPkt_size
   104 00000131 0F8569FFFFFF        <1>     jne errorExit
   105                              <1>     return ;Exit, device ready
    13 00000137 C3                  <2>  ret
   106                              <1> 
   107                              <1> flushInBuf:   ;Flush Input Buffers
   108 00000138 B005                <1>     mov al, 05h ;Bad request structure length?
   109 0000013A 4180380D            <1>     cmp byte [r8 + drvReqHdr.hdrlen], statusReqPkt_size
   110 0000013E 0F855CFFFFFF        <1>     jne errorExit
   111 00000144 C605D7FEFFFF00      <1>     mov byte [conBuf], 0   ;Clear buffer
   112                              <1> .cfib0:
   113 0000014B B401                <1>     mov ah, 01      ;Get buffer status
   114 0000014D CD36                <1>     int 36h
   115                              <1>     retz            ;If zero clear => no more keys to read
    23                              <2> cret z
    17 0000014F 7501                <3>  j%-1 short %%a
    18                              <3>  return
    13 00000151 C3                  <4>  ret
    19                              <3> %%a:
   116 00000152 30E4                <1>     xor ah, ah
   117 00000154 CD36                <1>     int 36h ;Read key to flush from buffer
   118 00000156 EBF3                <1>     jmp short .cfib0
   119                              <1> 
   120                              <1> write:   ;Write Chars
   121 00000158 B005                <1>     mov al, 05h ;Bad request structure length?
   122 0000015A 4180382A            <1>     cmp byte [r8 + drvReqHdr.hdrlen], ioReqPkt_size
   123 0000015E 0F853CFFFFFF        <1>     jne errorExit
   124                              <1> 
   125 00000164 498B700E            <1>     mov rsi, qword [r8 + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   126 00000168 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   127                              <1> .cw1: 
   128 0000016A 413B4816            <1>     cmp ecx, dword [r8 + ioReqPkt.tfrlen]
   129 0000016E 7407                <1>     je .cw2
   130 00000170 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   131 00000171 CD29                <1>     int 29h ;Fast print char
   132 00000173 FFC1                <1>     inc ecx
   133 00000175 EBF3                <1>     jmp short .cw1 ;keep printing until all chars printed
   134                              <1> .cw2:
   135 00000177 41894816            <1>     mov dword [r8 + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   136                              <1>     return
    13 0000017B C3                  <2>  ret
   137                              <1> ; -------------------- NEW FUNCTIONS -------------------- 
   138                              <1> genIOCTL:
   139                              <1> ;Only one function, MScrCap.
   140                              <1> ;Do all checks to ensure not an accidental call.
   141 0000017C 498B700F            <1>     mov rsi, qword [r8 + ioctlReqPkt.rsival]
   142 00000180 498B7817            <1>     mov rdi, qword [r8 + ioctlReqPkt.rdival]
   143 00000184 498B501F            <1>     mov rdx, qword [r8 + ioctlReqPkt.ctlptr]
   144 00000188 6681F91003          <1>     cmp cx, 0310h   ;Get MScrCap?
   145 0000018D 753B                <1>     jne .exitBad
   146 0000018F 4885F6              <1>     test rsi, rsi
   147 00000192 7536                <1>     jnz .exitBad
   148 00000194 4885FF              <1>     test rdi, rdi
   149 00000197 7531                <1>     jnz .exitBad
   150 00000199 66813A0001          <1>     cmp word [rdx + mScrCap.wVer], 0100h
   151 0000019E 752A                <1>     jne .exitBad
   152 000001A0 66817A020F00        <1>     cmp word [rdx + mScrCap.wLen], mScrCap_size
   153 000001A6 7522                <1>     jne .exitBad
   154                              <1>     ;Here we have verified we are ok! Proceed.
   155                              <1>     ;This IOCTL is equivalent to in MTDOS the CON reporting caps during driver init.
   156 000001A8 0FB74204            <1>     movzx eax, word [rdx + mScrCap.wMagic]
   157 000001AC 668905A8FEFFFF      <1>     mov word [magicKey], ax
   158 000001B3 C6420608            <1>     mov byte [rdx + mScrCap.bScrNum], (maxScr + 1)
   159 000001B7 488D0515000000      <1>     lea rax, mConHlp
   160 000001BE 48874207            <1>     xchg qword [rdx + mScrCap.qHlpPtr], rax  ;Swap pointers
   161 000001C2 4889055AFEFFFF      <1>     mov qword [hlpPtr], rax   ;Store this as the help pointer
   162                              <1>     return
    13 000001C9 C3                  <2>  ret
   163                              <1> .exitBad:
   164 000001CA 6641C740030380      <1>     mov word [r8 + drvReqHdr.status], drvErrStatus | drvBadCmd
   165 000001D1 F9                  <1>     stc
   166                              <1>     return
    13 000001D2 C3                  <2>  ret
   167                              <1> ;-------------------------------------------
   168                              <1> ;       mConHlp dispatch and routines
   169                              <1> ;-------------------------------------------
   170                              <1> 
   171                              <1> mConHlp:
   172                              <1> ;AL = 0: Get current screen number
   173                              <1> ;AL = 1: Set new screen number
   174                              <1> ;AL = 2: Reset the screen (CLS)
   175                              <1> ;Al = 3: Cancel help pointer support
   176 000001D3 85C0                <1>     test eax, eax
   177 000001D5 741D                <1>     jz getScreen
   178 000001D7 FFC8                <1>     dec eax
   179 000001D9 7426                <1>     jz swapScreen
   180 000001DB FFC8                <1>     dec eax
   181 000001DD 7436                <1>     jz resetScreen
   182 000001DF FFC8                <1>     dec eax
   183 000001E1 7402                <1>     jz delHlp
   184 000001E3 F9                  <1>     stc
   185                              <1>     return
    13 000001E4 C3                  <2>  ret
   186                              <1> delHlp:
   187                              <1> ;If the Session Manager has to de-install itself, call this 
   188                              <1> ; to indicate that the hlpPtr is no longer valid!
   189 000001E5 488D05B1FEFFFF      <1>     lea rax, noOp
   190 000001EC 48890530FEFFFF      <1>     mov qword [hlpPtr], rax
   191                              <1>     return
    13 000001F3 C3                  <2>  ret
   192                              <1> getScreen:
   193 000001F4 53                  <1>     push rbx
   194 000001F5 B8000F0000          <1>     mov eax, 0F00h
   195 000001FA CD30                <1>     int 30h
   196 000001FC 0FB6C7              <1>     movzx eax, bh
   197 000001FF 5B                  <1>     pop rbx
   198                              <1>     return
    13 00000200 C3                  <2>  ret
   199                              <1> swapScreen:
   200                              <1> ;If the screen number is above the max screen number we return error!
   201                              <1> ;This routine is signalled by the task swapping routine.
   202 00000201 0FB6C3              <1>     movzx eax, bl ;Get the screen number
   203 00000204 3D07000000          <1>     cmp eax, maxScr
   204 00000209 7708                <1>     ja .err
   205 0000020B 0D00050000          <1>     or eax, 0500h   
   206 00000210 CD30                <1>     int 30h         ;Swap active page on the VGA!
   207                              <1>     return
    13 00000212 C3                  <2>  ret
   208                              <1> .err:
   209 00000213 F9                  <1>     stc
   210                              <1>     return
    13 00000214 C3                  <2>  ret
   211                              <1> resetScreen:
   212                              <1> ;Resets the currently active screen!
   213 00000215 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   214 00000217 31DB                <1>     xor ebx, ebx
   215 00000219 CD30                <1>     int 30h
   216 0000021B B40F                <1>     mov ah, 0Fh ;Get screen mode
   217 0000021D CD30                <1>     int 30h
   218 0000021F 53                  <1>     push rbx    ;Save the screen number on stack
   219 00000220 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   220 00000223 FECA                <1>     dec dl
   221 00000225 B619                <1>     mov dh, 25  ;Number of rows is standard
   222 00000227 31C0                <1>     xor eax, eax
   223 00000229 89C1                <1>     mov ecx, eax
   224 0000022B B707                <1>     mov bh, 7   ;Screen attributes
   225 0000022D B406                <1>     mov ah, 6   ;Scroll
   226 0000022F CD30                <1>     int 30h
   227 00000231 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   228 00000233 5B                  <1>     pop rbx     ;Get back the screen number
   229 00000234 B402                <1>     mov ah, 2
   230 00000236 CD30                <1>     int 30h
   231                              <1>     return
    13 00000238 C3                  <2>  ret
   232                              <1>     
   233                              <1> ;------------- Driver built-in Interrupt Routines -------------
   234                              <1> fastOutput:         ;This CON driver supports Int 29h
   235                              <1> ;Called with char to transfer in al
   236 00000239 50                  <1>     push rax
   237 0000023A B40E                <1>     mov ah, 0Eh
   238 0000023C CD30                <1>     int 30h
   239 0000023E 58                  <1>     pop rax
   240 0000023F 48CF                <1>     iretq
   241                              <1> ctrlBreak:
   242                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   243 00000241 C605DAFDFFFF03      <1>     mov byte [conBuf], 03h    ;Place a ^C in buffer
   244 00000248 48CF                <1>     iretq
   245                              <1> 
   246                              <1> newKeybIntr:        ;New Keyboard Interrupt Hdlr
   247 0000024A 50                  <1>     push rax        ;Save RAX as a trashed reg
   248 0000024B 52                  <1>     push rdx
   249                              <1> ;Simulate an IRQ entry to old kbdHldr
   250 0000024C 4889E2              <1>     mov rdx, rsp
   251 0000024F 31C0                <1>     xor eax, eax
   252 00000251 668CD0              <1>     mov ax, ss
   253 00000254 50                  <1>     push rax
   254 00000255 52                  <1>     push rdx
   255 00000256 9C                  <1>     pushfq
   256 00000257 668CC8              <1>     mov ax, cs
   257 0000025A 50                  <1>     push rax
   258 0000025B FF15F2FDFFFF        <1>     call qword [oldKbdHdlr]
   259                              <1> 
   260 00000261 F605F5FDFFFFFF      <1>     test byte [inHdlr], -1      ;If set, we are reentering this. Exit!!
   261 00000268 753E                <1>     jnz .exit
   262 0000026A 66813DE8FDFFFFFFFF  <1>     cmp word [magicKey], -1     ;If no magic key to check, exit!
   263 00000273 7433                <1>     je .exit
   264 00000275 B800010000          <1>     mov eax, 0100h  ;Now we NDlook to see what was placed in.
   265 0000027A CD36                <1>     int 36h         
   266 0000027C 742A                <1>     jz .exit        ;If ZF=ZE, no keystroke available (should never happen)
   267 0000027E 663B05D6FDFFFF      <1>     cmp ax, word [magicKey] ;Did we receive the magic key
   268 00000285 7521                <1>     jne .exit
   269                              <1> ;Else, we now pull the magic key and signal SM!
   270 00000287 C605CFFDFFFFFF      <1>     mov byte [inHdlr], -1   ;Set reentrancy flag!
   271                              <1> ;Pull the magic char out of the buffer!
   272 0000028E 31C0                <1>     xor eax, eax
   273 00000290 CD36                <1>     int 36h
   274                              <1> ;Now pass this information to SM
   275 00000292 89C2                <1>     mov edx, eax    ;Pass sc/ASCII pair in edx
   276 00000294 B801000000          <1>     mov eax, 1      ;Call function 1
   277 00000299 FA                  <1>     cli ;Pause interrupts
   278 0000029A C605BCFDFFFF00      <1>     mov byte [inHdlr], 0    ;Clear reentrancy flag!
   279 000002A1 FF157CFDFFFF        <1>     call qword [hlpPtr]     ;Call SM
   280 000002A7 FB                  <1>     sti
   281                              <1> .exit:
   282 000002A8 5A                  <1>     pop rdx
   283 000002A9 58                  <1>     pop rax
   284 000002AA 48CF                <1>     iretq
   285                              <1> 
   286                              <1> 
   287                              <1> ;------------------ EJECT POINT ------------------
   288                              <1> 
   289                              <1> init:
   290                              <1> ;Start by hooking int 3Bh, int 29h and 0F1h (IRQ1) as part of the CON driver
   291                              <1> ;DO FASTOUT
   292 000002AC 488D1586FFFFFF      <1>     lea rdx, fastOutput
   293 000002B3 B829000000          <1>     mov eax, 29h
   294 000002B8 E8AF000000          <1>     call installInterrupt
   295                              <1> ;DO CTRL+BREAK
   296 000002BD 488D157DFFFFFF      <1>     lea rdx, ctrlBreak
   297 000002C4 B83B000000          <1>     mov eax, 3Bh
   298 000002C9 E89E000000          <1>     call installInterrupt
   299                              <1> ;DO IRQ1
   300 000002CE B8F1000000          <1>     mov eax, 0F1h   ;Get IRQ1 handler in rbx
   301 000002D3 E8BE000000          <1>     call getIntHdlr
   302 000002D8 48891D74FDFFFF      <1>     mov qword [oldKbdHdlr], rbx
   303 000002DF 488D1564FFFFFF      <1>     lea rdx, newKeybIntr
   304 000002E6 B8F1000000          <1>     mov eax, 0F1h
   305 000002EB E87C000000          <1>     call installInterrupt
   306                              <1> 
   307                              <1> .ci0:
   308 000002F0 B401                <1>     mov ah, 01      ;Get buffer status
   309 000002F2 CD36                <1>     int 36h
   310 000002F4 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   311 000002F6 30E4                <1>     xor ah, ah
   312 000002F8 CD36                <1>     int 36h ;Read key to flush from buffer
   313 000002FA EBF4                <1>     jmp short .ci0
   314                              <1> .ci1:
   315 000002FC B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   316 00000301 CD30                <1>     int 30h
   317 00000303 B402                <1>     mov ah, 02h
   318 00000305 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   319 00000307 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   320 00000309 CD30                <1>     int 30h
   321 0000030B B707                <1>     mov bh, 07h     ;Grey/Black attribs
   322 0000030D B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   323 00000312 CD30                <1>     int 30h
   324                              <1> 
   325 00000314 B800510000          <1>     mov eax, 5100h
   326 00000319 CD21                <1>     int 21h             ;Get current PSP ptr
   327 0000031B 4881FB09000000      <1>     cmp rbx, 9          ;If we are being used as a Kernel driver, no msg!
   328 00000322 740E                <1>     je skipMsg
   329                              <1> ;Else, print message!
   330 00000324 488D1513000000      <1>     lea rdx, helloStr   ;Print install string
   331 0000032B B800090000          <1>     mov eax, 0900h
   332 00000330 CD21                <1>     int 21h
   333                              <1> skipMsg:
   334 00000332 488D0573FFFFFF      <1>     lea rax, init   ;Eject init
   335 00000339 4989400E            <1>     mov qword [r8 + initReqPkt.endptr], rax
   336                              <1>     return
    13 0000033D C3                  <2>  ret
   337                              <1> 
   338 0000033E 2D2D2D20496E737461- <1> helloStr    db  "--- Installing MCON Device Driver V"
   338 00000347 6C6C696E67204D434F- <1>
   338 00000350 4E2044657669636520- <1>
   338 00000359 4472697665722056    <1>
   339 00000361 302E3031202D2D2D    <1>             db  vers+"0",".",rev/10+"0", (rev-rev/10*10)+"0", " ---"
   340 00000369 101324              <1>             db  10h,13h,"$"
   341                              <1> 
   342                              <1> 
   343                              <1> 
   344                              <1> installInterrupt:
   345                              <1> ;Writes the interrupt in the right place in the table
   346                              <1>     ;al = Interrupt number
   347                              <1>     ;rdx -> Handler to install
   348 0000036C 0F010D2D000000      <1>     sidt [myIdt]
   349 00000373 0FB6C0              <1>     movzx eax, al
   350 00000376 4892                <1>     xchg rdx, rax
   351 00000378 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
   352 0000037C 4803151F000000      <1>     add rdx, qword [myIdt.base]    
   353 00000383 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
   354 00000386 48C1E810            <1>     shr rax, 10h    ;Bring next word low
   355 0000038A 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
   356 0000038E 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
   357 00000392 894208              <1>     mov dword [rdx + 8], eax
   358 00000395 C3                  <1>     ret
   359                              <1> getIntHdlr:
   360                              <1> ;Gets an interrupt value. 
   361                              <1> ;Input: al = Interrupt number
   362                              <1> ;Output: rbx = Interrupt Vector
   363 00000396 50                  <1>     push rax
   364 00000397 B802120000          <1>     mov eax, 1202h  ;Get Interrupt handler in rbx
   365 0000039C CD2F                <1>     int 2Fh
   366 0000039E 58                  <1>     pop rax
   367                              <1>     return
    13 0000039F C3                  <2>  ret
   368                              <1>     ;sidt [myIdt]
   369                              <1>     ;movzx eax, al
   370                              <1>     ;shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   371                              <1>     ;add rax, qword [myIdt.base]    
   372                              <1>     ;xor ebx, ebx
   373                              <1>     ;mov ebx, dword [rax + 8]    ;Get bits 63...32
   374                              <1>     ;shl rbx, 10h    ;Push the high dword high
   375                              <1>     ;mov bx, word [rax + 6]      ;Get bits 31...16
   376                              <1>     ;shl rbx, 10h    ;Push word 2 into posiiton
   377                              <1>     ;mov bx, word [rax]          ;Get bits 15...0
   378                              <1>     ;return
   379                              <1> myIdt:
   380 000003A0 0000                <1> .limit  dw 0
   381 000003A2 0000000000000000    <1> .base   dq 0
   381          ------------------  <1>  info: assembly required 1+2+2 passes

