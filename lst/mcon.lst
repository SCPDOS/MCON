     1                                  [map all ./lst/mcon.map]
     2                                  DEFAULT REL
     3                                  BITS 64
     4                                  
     5                                  %include "./src/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvMulti    equ 20h ;Reserved, If set, device is multitasking. 
    68                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    69                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    70                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    71                              <1>     devDrvChar     equ 8000h ;If set, Char device
    72                              <1> ;Bit 0 1=console input
    73                              <1> ;    1 1=console output (character devices)
    74                              <1> ;    2 1=NUL device
    75                              <1> ;    3 1=CLOCK device
    76                              <1> ;    4 1=Int 29 output (CON)
    77                              <1> ;    5 1=Multitasking driver. Bit ignored by DOS. Used by multitaskers.
    78                              <1> ; If bit set, no crit2 lock placed on thread when making drv request.
    79                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    80                              <1> ;    7 1=Generic IOCTL function supported (19)
    81                              <1> ;   11 1=open/close/removable media supported (3.0+)
    82                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    83                              <1> ;      1=media descriptor in FAT required (block devices)
    84                              <1> ;   14 1=IOCTL R/W supported
    85                              <1> ;   15 0=block device
    86                              <1> ;      1=character device
    87                              <1> 
    88                              <1> ;Driver structures
    89                              <1> 
    90                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    91                              <1> 
    92                              <1>     .hdrlen db ?  ;Length of the request header
    93                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    94                              <1>     .cmdcde db ?  ;Command code
    95                              <1>     .status dw ?  ;Status word
    96                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    97                              <1> 
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> struc drvReqHdr
   101                              <1>     drvReqHdrM
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc initReqPkt  ;Init Request Packet
   105                              <1> 
   106                              <1>     drvReqHdrM   ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   107 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   108 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   109 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   110 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   111                              <1> 
   112                              <1> endstruc
   113                              <1> 
   114                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   115                              <1> 
   116                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   117 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   118 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   119 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   120                              <1> 
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   124                              <1> 
   125                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   126 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   127 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   128 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   129                              <1> 
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc ioReqPkt   ;IO Request Packet
   133                              <1> 
   134                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   135 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   136 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   137 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   138 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   139 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   140                              <1> 
   141                              <1> endstruc
   142                              <1> 
   143                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   144                              <1>     
   145                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   146 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   147                              <1> 
   148                              <1> endstruc
   149                              <1> 
   150                              <1> struc statusReqPkt   ;Status Request Packet
   151                              <1> 
   152                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   153                              <1> 
   154                              <1> endstruc
   155                              <1> 
   156                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   157                              <1> 
   158                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   159                              <1>      
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc openReqPkt ;Open Device Request Packet
   163                              <1> 
   164                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   165                              <1>      
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc closeReqPkt ;Close Device Request Packet
   169                              <1> 
   170                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   171                              <1>      
   172                              <1> endstruc
   173                              <1> 
   174                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   175                              <1> 
   176                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   177                              <1>      
   178                              <1> endstruc
   179                              <1> 
   180                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   181                              <1> 
   182                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   183 0000000D ??                  <1>     .majfun db ?  ;Major function number
   184 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   185 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   186 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   187 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   188                              <1> 
   189                              <1> endstruc
   190                              <1> 
   191                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   192                              <1>     
   193                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   194                              <1> 
   195                              <1> endstruc
   196                              <1> 
   197                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   198                              <1>     
   199                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   200                              <1> 
   201                              <1> endstruc
   202                              <1> 
   203                              <1> 
   204                              <1> struc genioctlGetParamsTable
   205 00000000 ??                  <1>     .size           db ?
   206 00000001 ??????????????      <1>     .res            db 7 dup (?)
   207 00000008 ????????????????    <1>     .sectorSize     db 8 dup (?)  ;Only the lower dword is valid here
   208 00000010 ????????????????    <1>     .numSectors     db 8 dup (?)
   209                              <1> endstruc
   210                              <1> 
   211                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   212                              <1> struc genioctlLBAformat
   213 00000000 ??                  <1>     .size           db ?
   214 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to format
   215 00000002 ????????????        <1>     .res            db 6 dup (?)
   216 00000008 ????????????????    <1>     .startSector    db 8 dup (?)  ;Sector to start format at
   217                              <1> endstruc
   218                              <1> 
   219                              <1> struc genioctlLBAwrite
   220 00000000 ??                  <1>     .size           db ?
   221 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to write
   222 00000002 ????????????        <1>     .res            db 6 dup (?)
   223 00000008 ????????????????    <1>     .startSector    db 8 dup (?)  ;Sector to start write at
   224 00000010 ????????????????    <1>     .xferBuffer     db 8 dup (?)  ;Transfer buffer for data
   225                              <1> endstruc
     6                                  %include "./src/mcon.inc"
     1                              <1> ;MCON screen capabilities
     2                              <1> 
     3                              <1> struc mScrCap
     4 00000000 ????                <1>     .wVer       dw ?    ;Upper byte, Major num (1). Lower byte, minor num (0)
     5 00000002 ????                <1>     .wLen       dw ?    ;Length of structure (13 bytes)
     6 00000004 ??                  <1>     .bScrNum    db ?    ;Number of screens supported by driver
     7 00000005 ????????????????    <1>     .pDevHlp    dq ?    ;Pointer to the devHlp help routine
     8                              <1> endstruc
     9                              <1> 
    10                              <1> maxScr  equ 07h ;Screens 0 - 7 (so 8 screens)
    11                              <1> 
    12                              <1> DevHlp_ConsInputFilter  equ 5
    13                              <1> DevHlp_Signal_SM        equ 7
    14                              <1> DevHlp_ProcBlock        equ 9
    15                              <1> DevHlp_ProcRun          equ 10
    16                              <1> DevHlp_GetDOSVar        equ 16
    17                              <1> 
    18                              <1> 
    19                              <1> maxSib      equ maxScr + 1   
    20                              <1> maxSibSeg   equ 1   ;There is only one (empty) segment per SIB.
    21                              <1> 
    22                              <1> %macro sibM 0 ;SIB macro for expanding
    23                              <1>     .bFrozenFlg db ?    ;0 means NOT frozen!
    24                              <1>     .wOffSeg    dw ?    ;Offset from the start of the SIB to first segment
    25                              <1>     .wSegCnt    dw ?    ;Number of segments
    26                              <1>     .wSibLen    dw ?    ;Total length of the SIB
    27                              <1> %endmacro
    28                              <1> 
    29                              <1> %macro sibSegM 0    ;SIB Segment macro for expanding
    30                              <1>     .wSegSize   dw ?    ;Size of the segment. 0 = Free. Driver maintains.
    31                              <1>     .wMemFlag   dw ?    ;Clear if seg in mem. Else swapped. DOSMGR maintains.
    32                              <1>     .pMemPtr    dq ?    ;Pointer to the segment in memory. DOSMGR maintains.
    33                              <1> %endmacro
    34                              <1> 
    35                              <1> struc sib
    36                              <1>     sibM
    23 00000000 ??                  <2>  .bFrozenFlg db ?
    24 00000001 ????                <2>  .wOffSeg dw ?
    25 00000003 ????                <2>  .wSegCnt dw ?
    26 00000005 ????                <2>  .wSibLen dw ?
    37                              <1> endstruc
    38                              <1> 
    39                              <1> struc sibSeg
    40                              <1>     sibSegM
    30 00000000 ????                <2>  .wSegSize dw ?
    31 00000002 ????                <2>  .wMemFlag dw ?
    32 00000004 ????????????????    <2>  .pMemPtr dq ?
    41                              <1> endstruc
    42                              <1> 
    43                              <1> struc screenSib 
    44                              <1> ;Our screen sib has one segment only and it comes immediately after the sib
    45                              <1>     sibM
    23 00000000 ??                  <2>  .bFrozenFlg db ?
    24 00000001 ????                <2>  .wOffSeg dw ?
    25 00000003 ????                <2>  .wSegCnt dw ?
    26 00000005 ????                <2>  .wSibLen dw ?
    46                              <1>     sibSegM
    30 00000007 ????                <2>  .wSegSize dw ?
    31 00000009 ????                <2>  .wMemFlag dw ?
    32 0000000B ????????????????    <2>  .pMemPtr dq ?
    47                              <1> endstruc
     7                                  %include "./src/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1>     ret
    14                              <1> %endmacro
    15                              <1> 
    16                              <1> %macro cret 1
    17                              <1>     j%-1 short %%a
    18                              <1>     return
    19                              <1> %%a:
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> %macro retz 0
    23                              <1> cret z
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> %macro retnz 0
    27                              <1> cret nz
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> %macro rete 0
    31                              <1> cret e
    32                              <1> %endmacro
    33                              <1> 
    34                              <1> %macro retne 0
    35                              <1> cret ne
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> %macro retc 0
    39                              <1> cret c
    40                              <1> %endmacro
    41                              <1> 
    42                              <1> %macro retnc 0
    43                              <1> cret nc
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retb 0
    47                              <1> cret b
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnb 0
    51                              <1> cret nb
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro reta 0
    55                              <1> cret a
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retna 0
    59                              <1> cret na
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro breakpoint 0
    63                              <1> xchg bx, bx
    64                              <1> %endmacro
     8                                  
     9                                  Segment cseg start=0 vstart=0
    10                                  %include "./src/mcdata.asm" ;Cannot put this in a separate segment due to reloc issues
     1                              <1> 
     2                              <1> ;Driver version number
     3                              <1> majVers equ 0
     4                              <1> minVers equ 2
     5                              <1> 
     6                              <1> conHdr:
     7 00000000 FFFFFFFFFFFFFFFF    <1>     dq -1
     8 00000008 7380                <1>     dw devDrvChar | devDrvIOCTL | devDrvMulti | devDrvFastOut | devDrvConOut | devDrvConIn
     9 0000000A [2B01000000000000]  <1>     dq strategy
    10 00000012 [6A01000000000000]  <1>     dq noOp    ;We don't use the interrupt endpoint.
    11 0000001A 434F4E2020202020    <1>     db "CON     "
    12                              <1> 
    13                              <1> funcTbl:
    14 00000022 4307                <1>     dw init - funcTbl       ;Init function
    15 00000024 4801                <1>     dw noOp - funcTbl       ;Media Check
    16 00000026 4801                <1>     dw noOp - funcTbl       ;Build BPB
    17 00000028 4901                <1>     dw unkCmd - funcTbl    ;IOCTL Input
    18 0000002A 5601                <1>     dw read - funcTbl       ;Read
    19 0000002C D801                <1>     dw ndRead - funcTbl     ;Non-destructive read
    20 0000002E 3D02                <1>     dw inStatus - funcTbl   ;Input Status
    21 00000030 4A02                <1>     dw flushInBuf - funcTbl ;Input flush
    22 00000032 9F02                <1>     dw write - funcTbl      ;Write
    23 00000034 9F02                <1>     dw write - funcTbl      ;Write with verify
    24 00000036 4801                <1>     dw noOp - funcTbl       ;Output Status
    25 00000038 4801                <1>     dw noOp - funcTbl       ;Output Flush
    26 0000003A 4801                <1>     dw noOp - funcTbl       ;IOCTL Output
    27 0000003C 4801                <1>     dw noOp - funcTbl       ;Device Open
    28 0000003E 4801                <1>     dw noOp - funcTbl       ;Device Close
    29 00000040 4801                <1>     dw noOp - funcTbl       ;Removable Media
    30 00000042 4901                <1>     dw unkCmd - funcTbl    ;Reserved function
    31 00000044 4901                <1>     dw unkCmd - funcTbl    ;Reserved function
    32 00000046 4901                <1>     dw unkCmd - funcTbl    ;Reserved function
    33                              <1> ; New functions
    34 00000048 2003                <1>     dw ioctl - funcTbl      ;Generic IOCTL
    35                              <1> 
    36                              <1> funcTblE equ ($ - funcTbl)/2    ;Compute number of entries
    37                              <1> 
    38                              <1> ioctlTbl:
    39 0000004A 2804                <1>     dw ioctl_init - ioctlTbl   ;Init multitasking capabilities 
    40 0000004C 3003                <1>     dw ioctl_ls   - ioctlTbl   ;Locate Segment Information Block
    41 0000004E 7B03                <1>     dw ioctl_ss   - ioctlTbl   ;Save Segment
    42 00000050 9103                <1>     dw ioctl_rs   - ioctlTbl   ;Restore Segment
    43 00000052 BA03                <1>     dw ioctl_ei   - ioctlTbl   ;Enable IO
    44 00000054 D503                <1>     dw ioctl_is   - ioctlTbl   ;Initialise Screen
    45 00000056 0704                <1>     dw ioctl_strt - ioctlTbl   ;Start (continue) console output (ex driver call)
    46 00000058 1D04                <1>     dw ioctl_stop - ioctlTbl   ;Stop (freeze) console output (ex driver call)
    47 0000005A C404                <1>     dw ioctl_deinst - ioctlTbl ;Deactivate Multitasking capabilities
    48                              <1> 
    49                              <1> 
    50 0000005C 00                  <1> bConBuf     db 0    ;Single byte input buffer
    51 0000005D 00                  <1> bKeybWait   db 0    ;Set if we are waiting on Int 36h for a keystroke
    52 0000005E 00                  <1> bInMulti    db 0    ;If set, in multitasking.
    53                              <1> 
    54 0000005F 0000000000000000    <1> pOldKbdIntr dq 0    ;Ptr to the Keyboard interrupt 
    55 00000067 0000000000000000    <1> pOldKbdHdlr dq 0    ;Ptr to the Keyboard service routine
    56 0000006F [6A01000000000000]  <1> pDevHlp     dq noOp ;Ptr to the DOS session help interface. Default to NOP
    57 00000077 FFFFFFFFFFFFFFFF    <1> pScrIoOk    dq -1   ;Ptr to the DOS variable that is set if screen IO is ok
    58                              <1> 
    59                              <1> 
    60                              <1> ;Screen Vars
    61 0000007F 00                  <1> bCurScr     db 0    ;Current screen number
    62 00000080 0000000000000000    <1> pCurSib     dq 0    ;Pointer to the current screen SIB
    63 00000088 00                  <1> bSavScr     db 0    ;Set if we are in the screen saving procedure
    64                              <1> 
    65 00000089 000000000000000000- <1> sibArray    db maxSib*screenSib_size dup (0)   ;Set our screenSIB array
    65 00000092 000000000000000000- <1>
    65 0000009B 000000000000000000- <1>
    65 000000A4 000000000000000000- <1>
    65 000000AD 000000000000000000- <1>
    65 000000B6 000000000000000000- <1>
    65 000000BF 000000000000000000- <1>
    65 000000C8 000000000000000000- <1>
    65 000000D1 000000000000000000- <1>
    65 000000DA 000000000000000000- <1>
    65 000000E3 000000000000000000- <1>
    65 000000EC 000000000000000000- <1>
    65 000000F5 000000000000000000- <1>
    65 000000FE 000000000000000000- <1>
    65 00000107 000000000000000000- <1>
    65 00000110 000000000000000000- <1>
    65 00000119 0000000000000000    <1>
    66                              <1> 
    67                              <1> 
    68                              <1> myIdt:
    69 00000121 0000                <1> .limit  dw 0
    70 00000123 0000000000000000    <1> .base   dq 0
    11                                  %include "./src/mccode.asm"
     1                              <1> ;This driver is designed to work in the MDOS environment. 
     2                              <1> 
     3                              <1> strategy:
     4                              <1> ;DOS calls this function with rbx=Ptr to request header.
     5                              <1> ;Rather than saving the 
     6 0000012B 50                  <1>     push rax
     7 0000012C 53                  <1>     push rbx
     8 0000012D 51                  <1>     push rcx
     9 0000012E 52                  <1>     push rdx
    10 0000012F 56                  <1>     push rsi
    11 00000130 57                  <1>     push rdi
    12 00000131 55                  <1>     push rbp
    13 00000132 4150                <1>     push r8 ;Use r8 as the static pointer to the request packet!
    14 00000134 4989D8              <1>     mov r8, rbx 
    15 00000137 6641C740030000      <1>     mov word [r8 + drvReqHdr.status], 0    ;Ensure status clear (should be!)
    16 0000013E 410FB64002          <1>     movzx eax, byte [r8 + drvReqHdr.cmdcde]
    17 00000143 3D14000000          <1>     cmp eax, funcTblE   
    18 00000148 7321                <1>     jae short unkCmd       ;If cmdcde is past the end of the table, error!
    19 0000014A 488D1DD1FEFFFF      <1>     lea rbx, funcTbl        ;Else get pointer to function
    20 00000151 0FB71443            <1>     movzx edx, word [rbx + 2*rax]   
    21 00000155 4801D3              <1>     add rbx, rdx
    22 00000158 FFD3                <1>     call rbx        
    23                              <1> exit:
    24 0000015A 66418148030001      <1>     or word [r8 + drvReqHdr.status], drvDonStatus    ;Set done bit!
    25                              <1> .err:
    26 00000161 4158                <1>     pop r8
    27 00000163 5D                  <1>     pop rbp
    28 00000164 5F                  <1>     pop rdi
    29 00000165 5E                  <1>     pop rsi
    30 00000166 5A                  <1>     pop rdx
    31 00000167 59                  <1>     pop rcx
    32 00000168 5B                  <1>     pop rbx
    33 00000169 58                  <1>     pop rax
    34                              <1> noOp:
    35                              <1>     return
    13 0000016A C3                  <2>  ret
    36                              <1> 
    37                              <1> unkCmd:
    38 0000016B B003                <1>     mov al, drvBadCmd
    39                              <1> errorExit:
    40                              <1> ;Jump to with al=Standard Error code
    41 0000016D 66B80080            <1>     mov ax, drvErrStatus    ;Set error bit, and NOT done bit!
    42 00000171 6641894003          <1>     mov word [r8 + drvReqHdr.status], ax
    43 00000176 EBE9                <1>     jmp short exit.err
    44                              <1> 
    45                              <1> read:    ;Read Chars
    46 00000178 B005                <1>     mov al, 05h ;Bad request structure length?
    47 0000017A 4180382A            <1>     cmp byte [r8 + drvReqHdr.hdrlen], ioReqPkt_size
    48 0000017E 75ED                <1>     jne errorExit
    49 00000180 4181781600000000    <1>     cmp dword [r8 + ioReqPkt.tfrlen], 0
    50 00000188 745C                <1>     je .exit
    51 0000018A 410FB6501A          <1>     movzx edx, byte [r8 + ioReqPkt.strtsc]  ;Get the screen number
    52 0000018F 81FA07000000        <1>     cmp edx, maxScr
    53 00000195 7607                <1>     jbe .okScrnNum
    54 00000197 B80B000000          <1>     mov eax, drvReadFault
    55 0000019C EBCF                <1>     jmp short errorExit
    56                              <1> .okScrnNum:
    57 0000019E 498B780E            <1>     mov rdi, qword [r8 + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    58 000001A2 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    59                              <1> .readLp:
    60 000001A4 3A15D5FEFFFF        <1>     cmp dl, byte [bCurScr]
    61 000001AA 740C                <1>     je .getch   ;If the current screen is not the one requesting, freeze!
    62 000001AC E8F9030000          <1>     call getSIB ;Get the ptr to the SIB for the screen number in dl.
    63 000001B1 E8AB030000          <1>     call procBlock  ;Lock using this SIB ptr as the identifier.
    64 000001B6 EBEC                <1>     jmp short .readLp
    65                              <1> .getch:
    66                              <1> ;    cli
    67 000001B8 803D9DFEFFFF00      <1>     cmp byte [bConBuf], 0   ;Does the buffer contain a zero?
    68 000001BF 752A                <1>     jnz .getScCde   ;No, get the buffer value
    69                              <1> 
    70                              <1> ;Do a simulated 36h/00h call!
    71 000001C1 E8B0030000          <1>     call simulBIOSRead
    72                              <1> 
    73                              <1>     ;xor eax, eax
    74                              <1>     ;int 36h
    75 000001C6 6685C0              <1>     test ax, ax ;If we read a null, read again! Go through screen check though!
    76 000001C9 74D9                <1>     jz .readLp
    77 000001CB 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr? 
    78 000001CF 7502                <1>     jne .savChr
    79 000001D1 B010                <1>     mov al, 10h     ;Store ^P in al!
    80                              <1> .savChr:
    81 000001D3 AA                  <1>     stosb
    82 000001D4 84C0                <1>     test al, al ;Was the ascii code stored 0?
    83 000001D6 7506                <1>     jnz .savScCde  ;No, skip storing scancode in buffer
    84 000001D8 88257EFEFFFF        <1>     mov byte [bConBuf], ah  ;Save scancode
    85                              <1> .savScCde:
    86                              <1> ;    sti
    87 000001DE FFC1                <1>     inc ecx ;Inc chars stored in buffer
    88 000001E0 413B4816            <1>     cmp ecx, dword [r8 + ioReqPkt.tfrlen]
    89 000001E4 75BE                <1>     jne .readLp
    90                              <1> .exit:
    91 000001E6 41894816            <1>     mov dword [r8 + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    92                              <1>     return
    13 000001EA C3                  <2>  ret
    93                              <1> .getScCde:
    94 000001EB 8A056BFEFFFF        <1>     mov al, byte [bConBuf]  ;Get the buffer value
    95 000001F1 C60564FEFFFF00      <1>     mov byte [bConBuf], 0   ;Reset the buffer value
    96 000001F8 EBD9                <1>     jmp short .savChr
    97                              <1> 
    98                              <1> ndRead:  ;Non destructive read chars
    99 000001FA B005                <1>     mov al, 05h ;Bad request structure length?
   100 000001FC 4180380E            <1>     cmp byte [r8 + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   101 00000200 0F8567FFFFFF        <1>     jne errorExit
   102 00000206 410FB6501A          <1>     movzx edx, byte [r8 + ioReqPkt.strtsc]  ;Get the screen number
   103 0000020B 81FA07000000        <1>     cmp edx, maxScr
   104 00000211 760A                <1>     jbe .okScrnNum
   105 00000213 B80B000000          <1>     mov eax, drvReadFault
   106 00000218 E950FFFFFF          <1>     jmp errorExit
   107                              <1> .okScrnNum:
   108 0000021D 3A155CFEFFFF        <1>     cmp dl, byte [bCurScr]  ;If not current screen, no char available!
   109 00000223 7532                <1>     jne .noChar
   110 00000225 8A0531FEFFFF        <1>     mov al, byte [bConBuf]
   111 0000022B 84C0                <1>     test al, al ;If this is not 0, there is a char in the buffer!
   112 0000022D 7523                <1>     jnz .charFnd
   113 0000022F E857030000          <1>     call simulBIOSNDRead
   114 00000234 7421                <1>     jz .noChar          ;If zero clear => no key in buffer
   115                              <1>     ;Else, Keystroke available
   116 00000236 6685C0              <1>     test ax, ax         ;If this is null, pull from the buffer
   117 00000239 750F                <1>     jnz .notNul         
   118 0000023B 3A153EFEFFFF        <1>     cmp dl, byte [bCurScr]  ;If no longer on current screen, no char available!
   119 00000241 7514                <1>     jne .noChar
   120 00000243 E82E030000          <1>     call simulBIOSRead
   121 00000248 EBB0                <1>     jmp short ndRead    ;Now go again...
   122                              <1> .notNul:
   123 0000024A 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr?
   124 0000024E 7502                <1>     jne .charFnd
   125 00000250 B010                <1>     mov al, 10h     ;Report ^P
   126                              <1> .charFnd:
   127 00000252 4188400D            <1>     mov byte [r8 + ndInNoWaitPkt.retbyt], al   ;Move char in al
   128                              <1>     return
    13 00000256 C3                  <2>  ret
   129                              <1> .noChar: ;No keystroke available
   130 00000257 6641C740030002      <1>     mov word [r8 + ndInNoWaitPkt.status], drvBsyStatus   ;Set busy bit
   131                              <1>     return
    13 0000025E C3                  <2>  ret
   132                              <1> 
   133                              <1> inStatus:         ;Get Input Status
   134 0000025F B005                <1>     mov al, 05h ;Bad request structure length?
   135 00000261 4180380D            <1>     cmp byte [r8 + drvReqHdr.hdrlen], statusReqPkt_size
   136 00000265 0F8502FFFFFF        <1>     jne errorExit
   137                              <1>     return ;Exit, device ready
    13 0000026B C3                  <2>  ret
   138                              <1> 
   139                              <1> flushInBuf:   ;Flush Input Buffers
   140 0000026C B005                <1>     mov al, 05h ;Bad request structure length?
   141 0000026E 4180380D            <1>     cmp byte [r8 + drvReqHdr.hdrlen], statusReqPkt_size
   142 00000272 0F85F5FEFFFF        <1>     jne errorExit
   143 00000278 410FB6501A          <1>     movzx edx, byte [r8 + ioReqPkt.strtsc]  ;Get the screen number
   144 0000027D 81FA07000000        <1>     cmp edx, maxScr
   145 00000283 760A                <1>     jbe .okScrnNum
   146 00000285 B80B000000          <1>     mov eax, drvReadFault
   147 0000028A E9DEFEFFFF          <1>     jmp errorExit
   148                              <1> .okScrnNum:
   149 0000028F 3A15EAFDFFFF        <1>     cmp dl, byte [bCurScr]
   150 00000295 740C                <1>     je .cleanBuf   ;If the current screen is not the one requesting, freeze!
   151                              <1> .block:
   152 00000297 E80E030000          <1>     call getSIB ;Get the ptr to the SIB for the screen number in dl.
   153 0000029C E8C0020000          <1>     call procBlock  ;Lock using this SIB ptr as the identifier.
   154 000002A1 EBEC                <1>     jmp short .okScrnNum
   155                              <1> .cleanBuf:
   156 000002A3 C605B2FDFFFF00      <1>     mov byte [bConBuf], 0   ;Clear buffer
   157 000002AA E8DC020000          <1>     call simulBIOSNDRead
   158                              <1>     retz            ;If zero clear => no more keys to read
    23                              <2> cret z
    17 000002AF 7501                <3>  j%-1 short %%a
    18                              <3>  return
    13 000002B1 C3                  <4>  ret
    19                              <3> %%a:
   159 000002B2 3A15C7FDFFFF        <1>     cmp dl, byte [bCurScr]  ;If screen has changed, block on SIB!
   160 000002B8 75DD                <1>     jne .block
   161 000002BA E8B7020000          <1>     call simulBIOSRead  ;Char pulled, check if screen number still ok!
   162 000002BF EBCE                <1>     jmp short .okScrnNum    
   163                              <1> 
   164                              <1> write:   ;Write Chars
   165 000002C1 B005                <1>     mov al, 05h ;Bad request structure length?
   166 000002C3 4180382A            <1>     cmp byte [r8 + drvReqHdr.hdrlen], ioReqPkt_size
   167 000002C7 0F85A0FEFFFF        <1>     jne errorExit
   168 000002CD 4181781600000000    <1>     cmp dword [r8 + ioReqPkt.tfrlen], 0
   169 000002D5 745D                <1>     je .exit
   170 000002D7 410FB6501A          <1>     movzx edx, byte [r8 + ioReqPkt.strtsc]  ;Get the screen number
   171 000002DC 81FA07000000        <1>     cmp edx, maxScr
   172 000002E2 760A                <1>     jbe .okScrnNum
   173 000002E4 B80A000000          <1>     mov eax, drvWriteFault
   174 000002E9 E97FFEFFFF          <1>     jmp errorExit
   175                              <1> .okScrnNum:
   176 000002EE 498B700E            <1>     mov rsi, qword [r8 + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   177 000002F2 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   178                              <1> .writeLp:
   179 000002F4 3A1585FDFFFF        <1>     cmp dl, byte [bCurScr]
   180 000002FA 740C                <1>     je .chkScrn ;If the current screen is not the one requesting, freeze!
   181 000002FC E8A9020000          <1>     call getSIB ;Get the ptr to the SIB for the screen number in dl.
   182                              <1> .block:
   183 00000301 E85B020000          <1>     call procBlock  ;Lock using this SIB ptr as the identifier.
   184 00000306 EBEC                <1>     jmp short .writeLp
   185                              <1> .chkScrn:   ;Check if the screen is frozen!
   186 00000308 488B1D71FDFFFF      <1>     mov rbx, qword [pCurSib]
   187 0000030F F603FF              <1>     test byte [rbx + sib.bFrozenFlg], -1
   188 00000312 75ED                <1>     jnz .block  ;Cant output if this flag is 0! Block on the SIB ptr.
   189 00000314 F6056DFDFFFFFF      <1>     test byte [bSavScr], -1 ;If set, we are in the middle of a save!
   190 0000031B 7409                <1>     jz .outch
   191 0000031D 488D1D64FDFFFF      <1>     lea rbx, bSavScr    ;Block on the bSavScr byte
   192 00000324 EBDB                <1>     jmp short .block
   193                              <1> .outch: 
   194 00000326 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   195 00000327 E80D000000          <1>     call outch ;Fast print char
   196 0000032C FFC1                <1>     inc ecx
   197 0000032E 413B4816            <1>     cmp ecx, dword [r8 + ioReqPkt.tfrlen]
   198 00000332 75C0                <1>     jne .writeLp  ;keep printing until all chars printed
   199                              <1> .exit:
   200 00000334 41894816            <1>     mov dword [r8 + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   201                              <1>     return
    13 00000338 C3                  <2>  ret
   202                              <1> outch:
   203                              <1> ;Prints the char passed in al, with 
   204 00000339 50                  <1>     push rax
   205 0000033A 53                  <1>     push rbx
   206 0000033B B40E                <1>     mov ah, 0Eh
   207 0000033D CD30                <1>     int 30h
   208 0000033F 5B                  <1>     pop rbx
   209 00000340 58                  <1>     pop rax
   210                              <1>     return
    13 00000341 C3                  <2>  ret
   211                              <1> ; -------------------- NEW IOCTL FUNCTIONS -------------------- 
   212                              <1> ioctl:
   213 00000342 80FD03              <1>     cmp ch, 03h     ;Is this a CON IOCTL request?
   214 00000345 0F8520FEFFFF        <1>     jne unkCmd
   215 0000034B 498B700F            <1>     mov rsi, qword [r8 + ioctlReqPkt.rsival]
   216 0000034F 80F940              <1>     cmp cl, 40h
   217 00000352 0F8213FEFFFF        <1>     jb unkCmd
   218 00000358 80F949              <1>     cmp cl, 49h
   219 0000035B 0F830AFEFFFF        <1>     jae unkCmd
   220 00000361 0FB6C9              <1>     movzx ecx, cl
   221 00000364 81E940000000        <1>     sub ecx, 40h     ;Get table offset
   222 0000036A 488D1DD9FCFFFF      <1>     lea rbx, ioctlTbl
   223 00000371 488B0C4B            <1>     mov rcx, qword [rbx + 2*rcx]    ;Get the offset from ioctlTbl
   224 00000375 4801CB              <1>     add rbx, rcx    ;Add to the table base address
   225 00000378 FFE3                <1>     jmp rbx ;Jump to the ptr in rbx and return to the main dispatcher!
   226                              <1> 
   227                              <1> ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   228                              <1> ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   229                              <1> ; NOTE FOR FUTURE! WE WILL NEED TO SAVE SOME INFORMATION IN THE DATA AREA |
   230                              <1> ; EVEN IF USING BIOS SINCE WE NEED TO ALLOW ALL SCREENS TO HAVE SEPARATE  |
   231                              <1> ; CURSOR SHAPES! AS THINGS STAND, ALL SCREENS SHARE THE SAME CURSOR SHAPE.|
   232                              <1> ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   233                              <1> ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   234                              <1> 
   235                              <1> ioctl_ls:
   236                              <1> ;Locate SIB. 
   237                              <1> ;By locating the SIB, we are selecting the screen!
   238 0000037A 4881FE07000000      <1>     cmp rsi, maxScr 
   239 00000381 0F87C1010000        <1>     ja badSIBNum
   240 00000387 89F2                <1>     mov edx, esi    ;Get the screen number in al
   241 00000389 3815F0FCFFFF        <1>     cmp byte [bCurScr], dl
   242 0000038F 7414                <1>     je .curScr
   243 00000391 8815E8FCFFFF        <1>     mov byte [bCurScr], dl
   244 00000397 E80E020000          <1>     call getSIB     ;Get sib ptr in rbx for screen number in dl.
   245 0000039C 48891DDDFCFFFF      <1>     mov qword [pCurSib], rbx
   246 000003A3 EB13                <1>     jmp short .exit
   247                              <1> .curScr:
   248                              <1> ;Here we get a pointer to the segment itself, not just the SIB
   249 000003A5 C605DCFCFFFFFF      <1>     mov byte [bSavScr], -1
   250 000003AC 31C0                <1>     xor eax, eax    ;Segment to get (Segment 0, only segment!)
   251 000003AE E816020000          <1>     call getSibSeg  ;Get rbx -> SIB, rdi -> Segment     
   252 000003B3 31C0                <1>     xor eax, eax
   253 000003B5 668907              <1>     mov word [rdi + sibSeg.wSegSize], ax    ;We don't need a segment!
   254                              <1> .exit:
   255 000003B8 4989581F            <1>     mov qword [r8 + ioctlReqPkt.ctlptr], rbx    ;Return SIB ptr here!
   256 000003BC 49C7400F00000000    <1>     mov qword [r8 + ioctlReqPkt.rsival], 0  ;Indicate success!
   257                              <1>     return
    13 000003C4 C3                  <2>  ret
   258                              <1> 
   259                              <1> ioctl_ss:
   260                              <1> ;Save Segment of current SIB.
   261                              <1> ;Input: rsi(sil) = ZX segment number to operate on into current SIB.
   262 000003C5 4881FE01000000      <1>     cmp rsi, maxSibSeg  ;Is this equal to 1?
   263 000003CC 0F8776010000        <1>     ja badSIBNum
   264                              <1> ;Since we are saving NO data, we simply return success!
   265 000003D2 49C7400F00000000    <1>     mov qword [r8 + ioctlReqPkt.rsival], 0  ;Indicate success!
   266                              <1>     return
    13 000003DA C3                  <2>  ret
   267                              <1> 
   268                              <1> ioctl_rs:
   269                              <1> ;Restore Segment (Actually, set segment data!)
   270                              <1> ;Input: rsi(sil) = ZX segment number to operate on into current SIB.
   271                              <1> ;
   272                              <1> ;We don't per-se restore data from the SIB instead getting BIOS to do
   273                              <1> ; the screen swap for us. We change the screen number to the current 
   274                              <1> ; screen number. 
   275                              <1> ;If we send a SIB segment number of 0, we are resetting the screen.
   276                              <1> ;Else, we are simply swapping to the screen.
   277 000003DB 4881FE01000000      <1>     cmp rsi, maxSibSeg  ;Is this equal to 1?
   278 000003E2 0F8760010000        <1>     ja badSIBNum
   279                              <1> 
   280                              <1> ;Start by swapping the screen to the SIB number!
   281 000003E8 8A0591FCFFFF        <1>     mov al, byte [bCurScr]    ;Move the screen number into al
   282 000003EE B405                <1>     mov ah, 05h     ;Set active page to al 
   283 000003F0 CD30                <1>     int 30h         ;Swap active page on the VGA!
   284                              <1> 
   285 000003F2 85F6                <1>     test esi, esi   ;If Segment 0, reset the screen totally!
   286 000003F4 7505                <1>     jnz .exit       ;Else we just wanted to swap to this screen (segment bzw.)
   287                              <1> ;Here we reset the screen!
   288 000003F6 E8E7010000          <1>     call resetScreen
   289                              <1> .exit:
   290 000003FB 49C7400F00000000    <1>     mov qword [r8 + ioctlReqPkt.rsival], 0  ;Indicate success!
   291                              <1>     return
    13 00000403 C3                  <2>  ret
   292                              <1> 
   293                              <1> ioctl_ei:
   294                              <1> ;Renable IO
   295                              <1> ;Input: rsi(sil) = Zero extended screen number to operate on.
   296 00000404 C6057DFCFFFF00      <1>     mov byte [bSavScr], 0   ;We are done saving the screen!
   297 0000040B 488D1D76FCFFFF      <1>     lea rbx, bSavScr    ;Thaw threads frozen during screen save!
   298 00000412 E83A010000          <1>     call procRun
   299 00000417 488B1D62FCFFFF      <1>     mov rbx, qword [pCurSib]    ;Thaw threads frozen while CurSib not current
   300                              <1>     return
    13 0000041E C3                  <2>  ret
   301                              <1> 
   302                              <1> ioctl_is:
   303                              <1> ;Initialise screen
   304                              <1> ;Input: rsi(sil) = Zero extended screen number to operate on.
   305 0000041F 4881FE07000000      <1>     cmp rsi, maxScr 
   306 00000426 0F871C010000        <1>     ja badSIBNum
   307 0000042C 89F2                <1>     mov edx, esi
   308 0000042E 88154BFCFFFF        <1>     mov byte [bCurScr], dl
   309 00000434 E871010000          <1>     call getSIB ;Get ptr to this sib in rdi
   310 00000439 48893D40FCFFFF      <1>     mov qword [pCurSib], rdi
   311 00000440 C60700              <1>     mov byte [rdi + sib.bFrozenFlg], 0  ;Screen not frozen!
   312                              <1> ;Reset the screen now
   313 00000443 E89A010000          <1>     call resetScreen
   314 00000448 49C7400F00000000    <1>     mov qword [r8 + ioctlReqPkt.rsival], 0  ;Indicate success!
   315                              <1>     return
    13 00000450 C3                  <2>  ret
   316                              <1> 
   317                              <1> ioctl_strt:
   318                              <1> ;Start (continue) screen output
   319                              <1> ;Input: rsi(sil) = Zero extended screen number to operate on.
   320 00000451 488B1D28FCFFFF      <1>     mov rbx, qword [pCurSib]
   321 00000458 F603FF              <1>     test byte [rbx + sib.bFrozenFlg], -1 ;Set the freeze flag in SIB
   322                              <1>     retz    ;If the current screen is already thawed, just return!
    23                              <2> cret z
    17 0000045B 7501                <3>  j%-1 short %%a
    18                              <3>  return
    13 0000045D C3                  <4>  ret
    19                              <3> %%a:
   323 0000045E C60300              <1>     mov byte [rbx + sib.bFrozenFlg], 0  ;Thaw this SIB now
   324 00000461 E8EB000000          <1>     call procRun    ;And thaw any threads blocked on this SIB!
   325                              <1>     return
    13 00000466 C3                  <2>  ret
   326                              <1> 
   327                              <1> ioctl_stop:
   328                              <1> ;Stop (freeze) current screen output
   329                              <1> ;Input: rsi(sil) = Zero extended screen number to operate on.
   330 00000467 488B1D12FCFFFF      <1>     mov rbx, qword [pCurSib]
   331 0000046E C603FF              <1>     mov byte [rbx + sib.bFrozenFlg], -1 ;Set the freeze flag in SIB
   332                              <1>     return
    13 00000471 C3                  <2>  ret
   333                              <1> 
   334                              <1> ioctl_init:
   335                              <1> ;Multitasking initialisation function. Passes a datapkt ptr
   336                              <1> ; in ctlptr field.
   337 00000472 F605E5FBFFFFFF      <1>     test byte [bInMulti], -1 ;Have we already run this function?
   338 00000479 0F84ECFCFFFF        <1>     je unkCmd
   339 0000047F 498B501F            <1>     mov rdx, qword [r8 + ioctlReqPkt.ctlptr]    ;Get pktptr
   340 00000483 66813A0001          <1>     cmp word [rdx + mScrCap.wVer], 0100h
   341 00000488 0F85DDFCFFFF        <1>     jne unkCmd
   342 0000048E 66817A020D00        <1>     cmp word [rdx + mScrCap.wLen], mScrCap_size
   343 00000494 0F85D1FCFFFF        <1>     jne unkCmd
   344                              <1> ;Here we have verified we are ok! Proceed.
   345 0000049A C605BDFBFFFFFF      <1>     mov byte [bInMulti], -1     ;Now we are entering MT! Set the lock!
   346                              <1> 
   347                              <1> ;This IOCTL is equivalent to how in MTDOS, CON reports caps during drvinit.
   348 000004A1 C6420408            <1>     mov byte [rdx + mScrCap.bScrNum], (maxScr + 1)
   349 000004A5 488B4205            <1>     mov rax, qword [rdx + mScrCap.pDevHlp]  ;Get the devHlp pointer
   350 000004A9 488905BFFBFFFF      <1>     mov qword [pDevHlp], rax
   351                              <1> 
   352                              <1> ;Now setup the pointer to the DOSMGR ScrIoOk byte
   353 000004B0 31C0                <1>     xor eax, eax    ;Get var 0 (ScrIoOk)
   354 000004B2 B901000000          <1>     mov ecx, 1      ;Length 1
   355 000004B7 BA10000000          <1>     mov edx, DevHlp_GetDOSVar     ;Get ScrIoOk Var
   356 000004BC FF15ADFBFFFF        <1>     call qword [pDevHlp]
   357 000004C2 488905AEFBFFFF      <1>     mov qword [pScrIoOk], rax   ;Store the pointer now!
   358                              <1> 
   359                              <1> ;Now install the multitasking keyboard interrupt routines!
   360                              <1> ;DO IRQ1
   361 000004C9 B8F1000000          <1>     mov eax, 0F1h   ;Get IRQ1 handler in rbx
   362 000004CE E888020000          <1>     call getIntHdlr
   363 000004D3 48891D85FBFFFF      <1>     mov qword [pOldKbdIntr], rbx
   364 000004DA 488D155F010000      <1>     lea rdx, keybIntr
   365 000004E1 B8F1000000          <1>     mov eax, 0F1h
   366 000004E6 E846020000          <1>     call installInterrupt
   367                              <1> ;DO Int 36h
   368 000004EB B836000000          <1>     mov eax, 036h   ;Get Int 36h handler in rbx
   369 000004F0 E866020000          <1>     call getIntHdlr
   370 000004F5 48891D6BFBFFFF      <1>     mov qword [pOldKbdHdlr], rbx
   371 000004FC 488D15BB010000      <1>     lea rdx, keybHdlr
   372 00000503 B836000000          <1>     mov eax, 036h
   373 00000508 E824020000          <1>     call installInterrupt
   374                              <1>     return
    13 0000050D C3                  <2>  ret
   375                              <1> 
   376                              <1> ioctl_deinst:
   377                              <1> ;Reset the internal vars to set CON back to single tasking mode!
   378 0000050E FA                  <1>     cli
   379 0000050F 488B1549FBFFFF      <1>     mov rdx, qword [pOldKbdIntr]
   380 00000516 B8F1000000          <1>     mov eax, 0F1h
   381 0000051B E811020000          <1>     call installInterrupt
   382 00000520 488B1540FBFFFF      <1>     mov rdx, qword [pOldKbdHdlr]
   383 00000527 B836000000          <1>     mov eax, 036h
   384 0000052C E800020000          <1>     call installInterrupt
   385 00000531 488D0532FCFFFF      <1>     lea rax, noOp
   386 00000538 48890530FBFFFF      <1>     mov qword [pDevHlp], rax    ;Restore the do nothing function!
   387 0000053F FB                  <1>     sti
   388 00000540 C60517FBFFFF00      <1>     mov byte [bInMulti], 0  ;Back out of Multitasking
   389                              <1>     return
    13 00000547 C3                  <2>  ret
   390                              <1> 
   391                              <1> badSIBNum:
   392                              <1> ;Jumped to to indicate a bad SIB or segment number!
   393 00000548 49C7400F01000000    <1>     mov qword [r8 + ioctlReqPkt.rsival], 1 
   394                              <1>     return
    13 00000550 C3                  <2>  ret
   395                              <1> 
   396                              <1> procRun:
   397                              <1> ;Input: rbx = qword identifier for the block tasks to unblock.
   398 00000551 53                  <1>     push rbx
   399 00000552 52                  <1>     push rdx
   400 00000553 BA0A000000          <1>     mov edx, DevHlp_ProcRun
   401 00000558 FF1511FBFFFF        <1>     call qword [pDevHlp]
   402 0000055E 5A                  <1>     pop rdx
   403 0000055F 5B                  <1>     pop rbx
   404                              <1>     return
    13 00000560 C3                  <2>  ret
   405                              <1> 
   406                              <1> procBlock:
   407                              <1> ;Input: rbx = qword identifier to block the thread on.
   408 00000561 53                  <1>     push rbx
   409 00000562 51                  <1>     push rcx
   410 00000563 52                  <1>     push rdx
   411 00000564 BA09000000          <1>     mov edx, DevHlp_ProcBlock   ;ProcBlock, Sleep is not interruptable
   412 00000569 31C9                <1>     xor ecx, ecx    ;No timeout!
   413 0000056B FA                  <1>     cli         ;Stop Interrupts to prevent race conditions
   414 0000056C FF15FDFAFFFF        <1>     call qword [pDevHlp]
   415 00000572 5A                  <1>     pop rdx
   416 00000573 59                  <1>     pop rcx
   417 00000574 5B                  <1>     pop rbx
   418                              <1>     return
    13 00000575 C3                  <2>  ret
   419                              <1> 
   420                              <1> simulBIOSRead:
   421                              <1> ;Simulates a BIOS call of 36h/00h bypassing any hooks.
   422 00000576 50                  <1>     push rax
   423 00000577 53                  <1>     push rbx
   424 00000578 31C0                <1>     xor eax, eax
   425 0000057A 668CD0              <1>     mov ax, ss
   426 0000057D 4889E3              <1>     mov rbx, rsp
   427 00000580 50                  <1>     push rax    ;Push SS
   428 00000581 53                  <1>     push rbx    ;Push RSP
   429 00000582 9C                  <1>     pushfq      ;Push RFLAGS
   430 00000583 668CC8              <1>     mov ax, cs
   431 00000586 50                  <1>     push rax    ;Push CS
   432 00000587 31C0                <1>     xor eax, eax  ;Get the keyb status
   433 00000589 EB16                <1>     jmp short simulBIOS
   434                              <1> simulBIOSNDRead:
   435                              <1> ;Simulates a BIOS call of 36h/01h bypassing any hooks.
   436 0000058B 50                  <1>     push rax
   437 0000058C 53                  <1>     push rbx
   438 0000058D 31C0                <1>     xor eax, eax
   439 0000058F 668CD0              <1>     mov ax, ss
   440 00000592 4889E3              <1>     mov rbx, rsp
   441 00000595 50                  <1>     push rax    ;Push SS
   442 00000596 53                  <1>     push rbx    ;Push RSP
   443 00000597 9C                  <1>     pushfq      ;Push RFLAGS
   444 00000598 668CC8              <1>     mov ax, cs
   445 0000059B 50                  <1>     push rax    ;Push CS
   446 0000059C B800010000          <1>     mov eax, 0100h  ;Get the keyb status
   447                              <1> simulBIOS:
   448                              <1> ;Calls the interrupt handler directly, bypassing any hooks.
   449                              <1> ;Prevents trapping and redirecting from hurting the integrity of the system.
   450                              <1> ;Follows the advice of the documentation. Lets see how well it works...
   451                              <1> ;We check we should be getting the characters just before we start our 
   452                              <1> ; read/ndread. After each call, if we are to make another call to the BIOS
   453                              <1> ; we check again to ensure that the screen state hasn't changed.
   454                              <1>     ;call keybHdlr   ;Call int hdlr, if active add a cli to start of keybHdlr.
   455 000005A1 FF15C0FAFFFF        <1>     call qword [pOldKbdHdlr]   ;Call original int hdlr
   456 000005A7 5B                  <1>     pop rbx
   457 000005A8 58                  <1>     pop rax
   458                              <1>     return
    13 000005A9 C3                  <2>  ret
   459                              <1> ;----------------------------------------------------------
   460                              <1> ; Internal utility functions
   461                              <1> ;----------------------------------------------------------
   462                              <1> 
   463                              <1> getSIB:
   464                              <1> ;Input: edx (zx from dl) = Screen number to get SIB for
   465                              <1> ;Output: rbx -> SIB for that screen number
   466 000005AA 488D1DD8FAFFFF      <1>     lea rbx, sibArray
   467 000005B1 85D2                <1>     test edx, edx
   468                              <1>     retz
    23                              <2> cret z
    17 000005B3 7501                <3>  j%-1 short %%a
    18                              <3>  return
    13 000005B5 C3                  <4>  ret
    19                              <3> %%a:
   469 000005B6 50                  <1>     push rax
   470 000005B7 51                  <1>     push rcx
   471 000005B8 52                  <1>     push rdx
   472 000005B9 89D0                <1>     mov eax, edx
   473 000005BB B913000000          <1>     mov ecx, screenSib_size ;Get screen Sib size
   474 000005C0 F7E1                <1>     mul ecx ;eax <- eax*ecx
   475 000005C2 4801C3              <1>     add rbx, rax
   476 000005C5 5A                  <1>     pop rdx
   477 000005C6 59                  <1>     pop rcx
   478 000005C7 58                  <1>     pop rax
   479                              <1>     return
    13 000005C8 C3                  <2>  ret
   480                              <1> 
   481                              <1> getSibSeg:
   482                              <1> ;Get the chosen segment from the current SIB
   483                              <1> ;Input: eax (zx from ax) = Segment number to get
   484                              <1> ;Output: rbx -> Current SIB
   485                              <1> ;        rdi -> Chosen SIB segment
   486 000005C9 488B1DB0FAFFFF      <1>     mov rbx, qword [pCurSib]
   487 000005D0 BF0C000000          <1>     mov edi, sibSeg_size ;Get the size of the sibseg
   488 000005D5 F7E7                <1>     mul edi     ;Get the segment offset in the segment block in eax
   489 000005D7 0FB77B01            <1>     movzx edi, word [rbx + sib.wOffSeg] ;
   490 000005DB 4801C7              <1>     add rdi, rax    ;Turn into an offset into the SIB
   491 000005DE 4801DF              <1>     add rdi, rbx    ;Turn into a proper pointer
   492                              <1>     return
    13 000005E1 C3                  <2>  ret
   493                              <1> 
   494                              <1> 
   495                              <1> resetScreen:
   496                              <1> ;Resets the current screen (Blanks).
   497 000005E2 0FB61D96FAFFFF      <1>     movzx ebx, byte [bCurScr]    ;Move the screen number into ebx
   498 000005E9 53                  <1>     push rbx    ;Save the screen number on stack
   499 000005EA 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   500 000005ED FECA                <1>     dec dl
   501 000005EF B619                <1>     mov dh, 25  ;Number of rows is standard
   502 000005F1 31C0                <1>     xor eax, eax
   503 000005F3 89C1                <1>     mov ecx, eax
   504 000005F5 B707                <1>     mov bh, 7   ;Screen attributes
   505 000005F7 B406                <1>     mov ah, 6   ;Scroll
   506 000005F9 CD30                <1>     int 30h
   507                              <1> 
   508 000005FB 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   509 000005FD 5B                  <1>     pop rbx     ;Get back the screen number
   510 000005FE B402                <1>     mov ah, 2   ;Set cursor position!
   511 00000600 CD30                <1>     int 30h
   512                              <1>     return
    13 00000602 C3                  <2>  ret
   513                              <1> ;--------------------------------------------------------------
   514                              <1> ;------------- Driver built-in Interrupt Routines -------------
   515                              <1> ;--------------------------------------------------------------
   516                              <1> fastOutput:         ;This CON driver supports Int 29h
   517                              <1> ;Called with char to transfer in al
   518 00000603 E831FDFFFF          <1>     call outch
   519 00000608 48CF                <1>     iretq
   520                              <1> 
   521                              <1> ctrlBreak:
   522                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK.
   523 0000060A 50                  <1>     push rax
   524 0000060B 52                  <1>     push rdx
   525                              <1> ;Simulate an interrupt call to the BIOS to pull the key out
   526                              <1> ; from the buffer.
   527 0000060C 4889E2              <1>     mov rdx, rsp
   528 0000060F 31C0                <1>     xor eax, eax
   529 00000611 668CD0              <1>     mov ax, ss
   530 00000614 50                  <1>     push rax
   531 00000615 52                  <1>     push rdx
   532 00000616 9C                  <1>     pushfq
   533 00000617 668CC8              <1>     mov ax, cs
   534 0000061A 50                  <1>     push rax
   535 0000061B 31C0                <1>     xor eax, eax    ;Getch, BIOS Places a zero word in the keyboard buffer
   536 0000061D FF1544FAFFFF        <1>     call qword [pOldKbdHdlr]    ;Pull the zero word out of the keyb buffer
   537 00000623 B803000000          <1>     mov eax, 03h                ;Replace it with a ^C char
   538 00000628 BA05000000          <1>     mov edx, DevHlp_ConsInputFilter
   539 0000062D FF153CFAFFFF        <1>     call qword [pDevHlp]        ;Ask DOS if it wants to eat the ^C
   540 00000633 7407                <1>     jz .exit                    ;Jump if DOS ate ^C :(
   541 00000635 C60520FAFFFF03      <1>     mov byte [bConBuf], 03h     ;Place a ^C in buffer
   542                              <1> .exit:
   543 0000063C 5A                  <1>     pop rdx
   544 0000063D 58                  <1>     pop rax
   545 0000063E 48CF                <1>     iretq
   546                              <1> 
   547                              <1> keybIntr:        ;New Keyboard Interrupt Hdlr
   548 00000640 50                  <1>     push rax        ;Save RAX as a trashed reg
   549 00000641 52                  <1>     push rdx
   550                              <1> ;Simulate an IRQ entry to old kbdHldr
   551 00000642 4889E2              <1>     mov rdx, rsp
   552 00000645 31C0                <1>     xor eax, eax
   553 00000647 668CD0              <1>     mov ax, ss
   554 0000064A 50                  <1>     push rax
   555 0000064B 52                  <1>     push rdx
   556 0000064C 9C                  <1>     pushfq
   557 0000064D 668CC8              <1>     mov ax, cs
   558 00000650 50                  <1>     push rax
   559 00000651 FF1508FAFFFF        <1>     call qword [pOldKbdIntr]    ;Do the SCP/BIOS kbd handler code!
   560                              <1> 
   561 00000657 4889E2              <1>     mov rdx, rsp
   562 0000065A 31C0                <1>     xor eax, eax
   563 0000065C 668CD0              <1>     mov ax, ss
   564 0000065F 50                  <1>     push rax
   565 00000660 52                  <1>     push rdx
   566 00000661 9C                  <1>     pushfq
   567 00000662 668CC8              <1>     mov ax, cs
   568 00000665 50                  <1>     push rax
   569 00000666 B800010000          <1>     mov eax, 0100h              ;Now read ahead, under our handler
   570 0000066B FF15F6F9FFFF        <1>     call qword [pOldKbdHdlr]    ;Gets the SC/ASCII pair in ax
   571 00000671 BA05000000          <1>     mov edx, DevHlp_ConsInputFilter
   572 00000676 FF15F3F9FFFF        <1>     call qword [pDevHlp]
   573 0000067C 7519                <1>     jnz .keepChar
   574                              <1>     ;Else remove the char from the buffer
   575 0000067E 4889E2              <1>     mov rdx, rsp
   576 00000681 31C0                <1>     xor eax, eax
   577 00000683 668CD0              <1>     mov ax, ss
   578 00000686 50                  <1>     push rax
   579 00000687 52                  <1>     push rdx
   580 00000688 9C                  <1>     pushfq
   581 00000689 668CC8              <1>     mov ax, cs
   582 0000068C 50                  <1>     push rax
   583 0000068D 31C0                <1>     xor eax, eax
   584 0000068F FF15D2F9FFFF        <1>     call qword [pOldKbdHdlr]    ;Gets the SC/ASCII pair in ax
   585 00000695 EB23                <1>     jmp short .exit
   586                              <1> .keepChar:
   587 00000697 FA                  <1>     cli
   588 00000698 F605BEF9FFFFFF      <1>     test byte [bKeybWait], -1  
   589 0000069F 7419                <1>     jz .exit
   590 000006A1 53                  <1>     push rbx
   591 000006A2 51                  <1>     push rcx
   592 000006A3 488D1DB3F9FFFF      <1>     lea rbx, bKeybWait  ;Run all processes with this identifier
   593 000006AA C60300              <1>     mov byte [rbx], 0   ;Clear the flag first
   594 000006AD BA0A000000          <1>     mov edx, DevHlp_ProcRun  ;ProcRun
   595 000006B2 FF15B7F9FFFF        <1>     call qword [pDevHlp]
   596 000006B8 59                  <1>     pop rcx
   597 000006B9 5B                  <1>     pop rbx
   598                              <1> .exit:
   599 000006BA 5A                  <1>     pop rdx
   600 000006BB 58                  <1>     pop rax
   601 000006BC 48CF                <1>     iretq
   602                              <1> 
   603                              <1> 
   604                              <1> keybHdlr:   ;Int 36h
   605 000006BE 84E4                <1>     test ah, ah
   606 000006C0 740B                <1>     je .readChar
   607 000006C2 80FC01              <1>     cmp ah, 1
   608 000006C5 7455                <1>     je .lookahead
   609 000006C7 FF259AF9FFFF        <1>     jmp qword [pOldKbdHdlr]
   610                              <1> .readChar:
   611 000006CD 50                  <1>     push rax    ;Push original function number on the stack
   612 000006CE 53                  <1>     push rbx
   613 000006CF 51                  <1>     push rcx
   614 000006D0 52                  <1>     push rdx
   615                              <1> .readChLp:
   616 000006D1 488B1D9FF9FFFF      <1>     mov rbx, qword [pScrIoOk]
   617 000006D8 F603FF              <1>     test byte [rbx], -1
   618 000006DB 7507                <1>     jnz .okToRead
   619 000006DD E87FFEFFFF          <1>     call procBlock
   620 000006E2 EBED                <1>     jmp short .readChLp ;Check again!
   621                              <1> .okToRead:
   622                              <1> ;Now we simulate a call into 36h/AH=01h - Get keyboard buffer status
   623 000006E4 FA                  <1>     cli
   624 000006E5 4889E2              <1>     mov rdx, rsp
   625 000006E8 31C0                <1>     xor eax, eax
   626 000006EA 668CD0              <1>     mov ax, ss
   627 000006ED 50                  <1>     push rax
   628 000006EE 52                  <1>     push rdx
   629 000006EF 9C                  <1>     pushfq
   630 000006F0 668CC8              <1>     mov ax, cs
   631 000006F3 50                  <1>     push rax
   632 000006F4 B800010000          <1>     mov eax, 0100h  ;Get the keyb status
   633 000006F9 FF1568F9FFFF        <1>     call qword [pOldKbdHdlr]    ;Interrupts remain set on return
   634 000006FF 7511                <1>     jnz .doCharRead
   635                              <1> ;If the char isn't there, we gotta pblock until it is.
   636 00000701 488D1D55F9FFFF      <1>     lea rbx, bKeybWait
   637 00000708 C603FF              <1>     mov byte [rbx], -1
   638 0000070B E851FEFFFF          <1>     call procBlock
   639 00000710 EBBF                <1>     jmp short .readChLp ;Check again with CLI set!
   640                              <1> .doCharRead:
   641 00000712 5A                  <1>     pop rdx
   642 00000713 59                  <1>     pop rcx
   643 00000714 5B                  <1>     pop rbx
   644 00000715 58                  <1>     pop rax
   645                              <1> .goKbd:
   646 00000716 FF254BF9FFFF        <1>     jmp qword [pOldKbdHdlr]
   647                              <1> .lookahead:
   648 0000071C 53                  <1>     push rbx
   649 0000071D 488B1D53F9FFFF      <1>     mov rbx, qword [pScrIoOk]   ;Can we check?
   650 00000724 F603FF              <1>     test byte [rbx], -1
   651 00000727 5B                  <1>     pop rbx
   652 00000728 75EC                <1>     jnz .goKbd  ;If we can, do it!
   653 0000072A 80642410BF          <1>     and byte [rsp + 2*8], ~40h    ;Clear ZF of flags
   654 0000072F 48CF                <1>     iretq
   655                              <1> 
   656                              <1> installInterrupt:
   657                              <1> ;Writes the interrupt in the right place in the table
   658                              <1>     ;al = Interrupt number
   659                              <1>     ;rdx -> Handler to install
   660 00000731 0F010DE9F9FFFF      <1>     sidt [myIdt]
   661 00000738 0FB6C0              <1>     movzx eax, al
   662 0000073B 4892                <1>     xchg rdx, rax
   663 0000073D 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
   664 00000741 480315DBF9FFFF      <1>     add rdx, qword [myIdt.base]    
   665 00000748 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
   666 0000074B 48C1E810            <1>     shr rax, 10h    ;Bring next word low
   667 0000074F 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
   668 00000753 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
   669 00000757 894208              <1>     mov dword [rdx + 8], eax
   670 0000075A C3                  <1>     ret
   671                              <1> getIntHdlr:
   672                              <1> ;Gets an interrupt value. 
   673                              <1> ;Input: al = Interrupt number
   674                              <1> ;Output: rbx = Interrupt Vector
   675 0000075B 50                  <1>     push rax
   676 0000075C B802120000          <1>     mov eax, 1202h  ;Get Interrupt handler in rbx
   677 00000761 CD2F                <1>     int 2Fh
   678 00000763 58                  <1>     pop rax
   679                              <1>     return
    13 00000764 C3                  <2>  ret
   680                              <1>     ;sidt [myIdt]
   681                              <1>     ;movzx eax, al
   682                              <1>     ;shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   683                              <1>     ;add rax, qword [myIdt.base]    
   684                              <1>     ;xor ebx, ebx
   685                              <1>     ;mov ebx, dword [rax + 8]    ;Get bits 63...32
   686                              <1>     ;shl rbx, 10h    ;Push the high dword high
   687                              <1>     ;mov bx, word [rax + 6]      ;Get bits 31...16
   688                              <1>     ;shl rbx, 10h    ;Push word 2 into posiiton
   689                              <1>     ;mov bx, word [rax]          ;Get bits 15...0
   690                              <1>     ;return
   691                              <1> 
   692                              <1> ;------------------ EJECT POINT ------------------
   693                              <1> 
   694                              <1> init:
   695                              <1> ;Start by hooking int 3Bh, int 29h and 0F1h (IRQ1) as part of the CON driver
   696                              <1> ;DO FASTOUT
   697 00000765 488D1597FEFFFF      <1>     lea rdx, fastOutput
   698 0000076C B829000000          <1>     mov eax, 29h
   699 00000771 E8BBFFFFFF          <1>     call installInterrupt
   700                              <1> ;DO CTRL+BREAK
   701 00000776 488D158DFEFFFF      <1>     lea rdx, ctrlBreak
   702 0000077D B83B000000          <1>     mov eax, 3Bh
   703 00000782 E8AAFFFFFF          <1>     call installInterrupt
   704                              <1> .ci0:
   705 00000787 B401                <1>     mov ah, 01      ;Get buffer status
   706 00000789 CD36                <1>     int 36h
   707 0000078B 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   708 0000078D 30E4                <1>     xor ah, ah
   709 0000078F CD36                <1>     int 36h ;Read key to flush from buffer
   710 00000791 EBF4                <1>     jmp short .ci0
   711                              <1> .ci1:
   712 00000793 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   713 00000798 CD30                <1>     int 30h
   714 0000079A B402                <1>     mov ah, 02h
   715 0000079C 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   716 0000079E 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   717 000007A0 CD30                <1>     int 30h
   718 000007A2 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   719 000007A4 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   720 000007A9 CD30                <1>     int 30h
   721                              <1> 
   722 000007AB B800510000          <1>     mov eax, 5100h
   723 000007B0 CD21                <1>     int 21h             ;Get current PSP ptr
   724 000007B2 4881FB09000000      <1>     cmp rbx, 9          ;If we are being used as a Kernel driver, no msg!
   725 000007B9 740E                <1>     je skipMsg
   726                              <1> ;Else, print message!
   727 000007BB 488D1513000000      <1>     lea rdx, helloStr   ;Print install string
   728 000007C2 B800090000          <1>     mov eax, 0900h
   729 000007C7 CD21                <1>     int 21h
   730                              <1> skipMsg:
   731 000007C9 488D0595FFFFFF      <1>     lea rax, init   ;Eject init
   732 000007D0 4989400E            <1>     mov qword [r8 + initReqPkt.endptr], rax
   733                              <1>     return
    13 000007D4 C3                  <2>  ret
   734                              <1> 
   735 000007D5 2D2D2D20496E737461- <1> helloStr    db  "--- Installing MCON Device Driver V"
   735 000007DE 6C6C696E67204D434F- <1>
   735 000007E7 4E2044657669636520- <1>
   735 000007F0 4472697665722056    <1>
   736 000007F8 302E30              <1>             db  majVers+"0",".",minVers/10+"0"
   737 000007FB 32202D2D2D0A0D24    <1>             db (minVers-minVers/10*10)+"0", " ---", 10,13,"$"
   737          ------------------  <1>  info: assembly required 1+2+2 passes

