     1                                  [map all ./lst/mcon.map]
     2                                  DEFAULT REL
     3                                  BITS 64
     4                                  
     5                                  %include "./src/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvMulti    equ 20h ;Reserved, If set, device is multitasking. 
    68                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    69                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    70                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    71                              <1>     devDrvChar     equ 8000h ;If set, Char device
    72                              <1> ;Bit 0 1=console input
    73                              <1> ;    1 1=console output (character devices)
    74                              <1> ;    2 1=NUL device
    75                              <1> ;    3 1=CLOCK device
    76                              <1> ;    4 1=Int 29 output (CON)
    77                              <1> ;    5 1=Multitasking driver. Bit ignored by DOS. Used by multitaskers.
    78                              <1> ; If bit set, no crit2 lock placed on thread when making drv request.
    79                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    80                              <1> ;    7 1=Generic IOCTL function supported (19)
    81                              <1> ;   11 1=open/close/removable media supported (3.0+)
    82                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    83                              <1> ;      1=media descriptor in FAT required (block devices)
    84                              <1> ;   14 1=IOCTL R/W supported
    85                              <1> ;   15 0=block device
    86                              <1> ;      1=character device
    87                              <1> 
    88                              <1> ;Driver structures
    89                              <1> 
    90                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    91                              <1> 
    92                              <1>     .hdrlen db ?  ;Length of the request header
    93                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    94                              <1>     .cmdcde db ?  ;Command code
    95                              <1>     .status dw ?  ;Status word
    96                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    97                              <1> 
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> struc drvReqHdr
   101                              <1>     drvReqHdrM
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc initReqPkt  ;Init Request Packet
   105                              <1> 
   106                              <1>     drvReqHdrM   ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   107 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   108 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   109 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   110 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   111                              <1> 
   112                              <1> endstruc
   113                              <1> 
   114                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   115                              <1> 
   116                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   117 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   118 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   119 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   120                              <1> 
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   124                              <1> 
   125                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   126 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   127 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   128 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   129                              <1> 
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc ioReqPkt   ;IO Request Packet
   133                              <1> 
   134                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   135 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   136 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   137 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   138 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   139 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   140                              <1> 
   141                              <1> endstruc
   142                              <1> 
   143                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   144                              <1>     
   145                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   146 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   147                              <1> 
   148                              <1> endstruc
   149                              <1> 
   150                              <1> struc statusReqPkt   ;Status Request Packet
   151                              <1> 
   152                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   153                              <1> 
   154                              <1> endstruc
   155                              <1> 
   156                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   157                              <1> 
   158                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   159                              <1>      
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc openReqPkt ;Open Device Request Packet
   163                              <1> 
   164                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   165                              <1>      
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc closeReqPkt ;Close Device Request Packet
   169                              <1> 
   170                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   171                              <1>      
   172                              <1> endstruc
   173                              <1> 
   174                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   175                              <1> 
   176                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   177                              <1>      
   178                              <1> endstruc
   179                              <1> 
   180                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   181                              <1> 
   182                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   183 0000000D ??                  <1>     .majfun db ?  ;Major function number
   184 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   185 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   186 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   187 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   188                              <1> 
   189                              <1> endstruc
   190                              <1> 
   191                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   192                              <1>     
   193                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   194                              <1> 
   195                              <1> endstruc
   196                              <1> 
   197                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   198                              <1>     
   199                              <1>     drvReqHdrM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   200                              <1> 
   201                              <1> endstruc
   202                              <1> 
   203                              <1> 
   204                              <1> struc genioctlGetParamsTable
   205 00000000 ??                  <1>     .size           db ?
   206 00000001 ??????????????      <1>     .res            db 7 dup (?)
   207 00000008 ????????????????    <1>     .sectorSize     db 8 dup (?)  ;Only the lower dword is valid here
   208 00000010 ????????????????    <1>     .numSectors     db 8 dup (?)
   209                              <1> endstruc
   210                              <1> 
   211                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   212                              <1> struc genioctlLBAformat
   213 00000000 ??                  <1>     .size           db ?
   214 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to format
   215 00000002 ????????????        <1>     .res            db 6 dup (?)
   216 00000008 ????????????????    <1>     .startSector    db 8 dup (?)  ;Sector to start format at
   217                              <1> endstruc
   218                              <1> 
   219                              <1> struc genioctlLBAwrite
   220 00000000 ??                  <1>     .size           db ?
   221 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to write
   222 00000002 ????????????        <1>     .res            db 6 dup (?)
   223 00000008 ????????????????    <1>     .startSector    db 8 dup (?)  ;Sector to start write at
   224 00000010 ????????????????    <1>     .xferBuffer     db 8 dup (?)  ;Transfer buffer for data
   225                              <1> endstruc
     6                                  %include "./src/mcon.inc"
     1                              <1> ;MCON screen capabilities
     2                              <1> 
     3                              <1> struc mScrCap
     4 00000000 ????                <1>     .wVer       dw ?    ;Upper byte, Major num (1). Lower byte, minor num (0)
     5 00000002 ????                <1>     .wLen       dw ?    ;Length of structure (15 bytes)
     6 00000004 ??                  <1>     .bScrNum    db ?    ;Number of screens supported by driver
     7 00000005 ????????????????    <1>     .pDevHlp    dq ?    ;Pointer to the mCon help routine
     8                              <1> endstruc
     9                              <1> 
    10                              <1> maxScr  equ 07h ;Screens 0 - 7 (so 8 screens)
    11                              <1> 
    12                              <1> DevHlp_ConsInputFilter  equ 5
    13                              <1> DevHlp_Signal_SM        equ 7
    14                              <1> DevHlp_ProcBlock        equ 9
    15                              <1> DevHlp_ProcRun          equ 10
    16                              <1> DevHlp_GetDOSVar        equ 16
    17                              <1> 
    18                              <1> 
    19                              <1> maxSib      equ maxScr + 1   
    20                              <1> maxSibSeg   equ 1   ;There is only one (empty) segment per SIB.
    21                              <1> 
    22                              <1> %macro sibM 0 ;SIB macro for expanding
    23                              <1>     .bFrozenFlg db ?    ;0 means NOT frozen!
    24                              <1>     .wOffSeg    dw ?    ;Offset from the start of the SIB to first segment
    25                              <1>     .wSegCnt    dw ?    ;Number of segments
    26                              <1>     .wSibLen    dw ?    ;Total length of the SIB
    27                              <1> %endmacro
    28                              <1> 
    29                              <1> %macro sibSegM 0    ;SIB Segment macro for expanding
    30                              <1>     .wSegSize   dw ?    ;Size of the segment. 0 = Free. Driver maintains.
    31                              <1>     .wMemFlag   dw ?    ;Clear if seg in mem. Else swapped. DOSMGR maintains.
    32                              <1>     .pMemPtr    dq ?    ;Pointer to the segment in memory. DOSMGR maintains.
    33                              <1> %endmacro
    34                              <1> 
    35                              <1> struc sib
    36                              <1>     sibM
    23 00000000 ??                  <2>  .bFrozenFlg db ?
    24 00000001 ????                <2>  .wOffSeg dw ?
    25 00000003 ????                <2>  .wSegCnt dw ?
    26 00000005 ????                <2>  .wSibLen dw ?
    37                              <1> endstruc
    38                              <1> 
    39                              <1> struc sibSeg
    40                              <1>     sibSegM
    30 00000000 ????                <2>  .wSegSize dw ?
    31 00000002 ????                <2>  .wMemFlag dw ?
    32 00000004 ????????????????    <2>  .pMemPtr dq ?
    41                              <1> endstruc
    42                              <1> 
    43                              <1> struc screenSib 
    44                              <1> ;Our screen sib has one segment only and it comes immediately after the sib
    45                              <1>     sibM
    23 00000000 ??                  <2>  .bFrozenFlg db ?
    24 00000001 ????                <2>  .wOffSeg dw ?
    25 00000003 ????                <2>  .wSegCnt dw ?
    26 00000005 ????                <2>  .wSibLen dw ?
    46                              <1>     sibSegM
    30 00000007 ????                <2>  .wSegSize dw ?
    31 00000009 ????                <2>  .wMemFlag dw ?
    32 0000000B ????????????????    <2>  .pMemPtr dq ?
    47                              <1> endstruc
     7                                  %include "./src/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1>     ret
    14                              <1> %endmacro
    15                              <1> 
    16                              <1> %macro cret 1
    17                              <1>     j%-1 short %%a
    18                              <1>     return
    19                              <1> %%a:
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> %macro retz 0
    23                              <1> cret z
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> %macro retnz 0
    27                              <1> cret nz
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> %macro rete 0
    31                              <1> cret e
    32                              <1> %endmacro
    33                              <1> 
    34                              <1> %macro retne 0
    35                              <1> cret ne
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> %macro retc 0
    39                              <1> cret c
    40                              <1> %endmacro
    41                              <1> 
    42                              <1> %macro retnc 0
    43                              <1> cret nc
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro retb 0
    47                              <1> cret b
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %macro retnb 0
    51                              <1> cret nb
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro reta 0
    55                              <1> cret a
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro retna 0
    59                              <1> cret na
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro breakpoint 0
    63                              <1> xchg bx, bx
    64                              <1> %endmacro
     8                                  
     9                                  Segment cseg start=0 vstart=0
    10                                  %include "./src/mcdata.asm" ;Cannot put this in a separate segment due to reloc issues
     1                              <1> 
     2                              <1> ;Driver version number
     3                              <1> majVers equ 0
     4                              <1> minVers equ 2
     5                              <1> 
     6                              <1> conHdr:
     7 00000000 FFFFFFFFFFFFFFFF    <1>     dq -1
     8 00000008 7380                <1>     dw devDrvChar | devDrvIOCTL | devDrvMulti | devDrvFastOut | devDrvConOut | devDrvConIn
     9 0000000A [2B01000000000000]  <1>     dq strategy
    10 00000012 [6A01000000000000]  <1>     dq noOp    ;We don't use the interrupt endpoint.
    11 0000001A 434F4E2020202020    <1>     db "CON     "
    12                              <1> 
    13                              <1> funcTbl:
    14 00000022 0007                <1>     dw init - funcTbl       ;Init function
    15 00000024 4801                <1>     dw noOp - funcTbl       ;Media Check
    16 00000026 4801                <1>     dw noOp - funcTbl       ;Build BPB
    17 00000028 4901                <1>     dw unkCmd - funcTbl    ;IOCTL Input
    18 0000002A 5601                <1>     dw read - funcTbl       ;Read
    19 0000002C DC01                <1>     dw ndRead - funcTbl     ;Non-destructive read
    20 0000002E 3502                <1>     dw inStatus - funcTbl   ;Input Status
    21 00000030 4202                <1>     dw flushInBuf - funcTbl ;Input flush
    22 00000032 9002                <1>     dw write - funcTbl      ;Write
    23 00000034 9002                <1>     dw write - funcTbl      ;Write with verify
    24 00000036 4801                <1>     dw noOp - funcTbl       ;Output Status
    25 00000038 4801                <1>     dw noOp - funcTbl       ;Output Flush
    26 0000003A 4801                <1>     dw noOp - funcTbl       ;IOCTL Output
    27 0000003C 4801                <1>     dw noOp - funcTbl       ;Device Open
    28 0000003E 4801                <1>     dw noOp - funcTbl       ;Device Close
    29 00000040 4801                <1>     dw noOp - funcTbl       ;Removable Media
    30 00000042 4901                <1>     dw unkCmd - funcTbl    ;Reserved function
    31 00000044 4901                <1>     dw unkCmd - funcTbl    ;Reserved function
    32 00000046 4901                <1>     dw unkCmd - funcTbl    ;Reserved function
    33                              <1> ; New functions
    34 00000048 1103                <1>     dw ioctl - funcTbl      ;Generic IOCTL
    35                              <1> 
    36                              <1> funcTblE equ ($ - funcTbl)/2    ;Compute number of entries
    37                              <1> 
    38                              <1> ioctlTbl:
    39 0000004A 1904                <1>     dw ioctl_init - ioctlTbl   ;Init multitasking capabilities 
    40 0000004C 2103                <1>     dw ioctl_ls   - ioctlTbl   ;Locate Segment Information Block
    41 0000004E 6C03                <1>     dw ioctl_ss   - ioctlTbl   ;Save Segment
    42 00000050 8203                <1>     dw ioctl_rs   - ioctlTbl   ;Restore Segment
    43 00000052 AB03                <1>     dw ioctl_ei   - ioctlTbl   ;Enable IO
    44 00000054 C603                <1>     dw ioctl_is   - ioctlTbl   ;Initialise Screen
    45 00000056 F803                <1>     dw ioctl_strt - ioctlTbl   ;Start (continue) console output (ex driver call)
    46 00000058 0E04                <1>     dw ioctl_stop - ioctlTbl   ;Stop (freeze) console output (ex driver call)
    47 0000005A B504                <1>     dw ioctl_deinst - ioctlTbl ;Deactivate Multitasking capabilities
    48                              <1> 
    49                              <1> 
    50 0000005C 00                  <1> bConBuf     db 0    ;Single byte input buffer
    51 0000005D 00                  <1> bKeybWait   db 0    ;Set if we are waiting on Int 36h for a keystroke
    52 0000005E 00                  <1> bInMulti    db 0    ;If set, in multitasking.
    53                              <1> 
    54 0000005F 0000000000000000    <1> pOldKbdIntr dq 0    ;Ptr to the Keyboard interrupt 
    55 00000067 0000000000000000    <1> pOldKbdHdlr dq 0    ;Ptr to the Keyboard service routine
    56 0000006F [6A01000000000000]  <1> pDevHlp     dq noOp ;Ptr to the DOS session help interface. Default to NOP
    57 00000077 FFFFFFFFFFFFFFFF    <1> pScrIoOk    dq -1   ;Ptr to the DOS variable that is set if screen IO is ok
    58                              <1> 
    59                              <1> 
    60                              <1> ;Screen Vars
    61 0000007F 00                  <1> bCurScr     db 0    ;Current screen number
    62 00000080 0000000000000000    <1> pCurSib     dq 0    ;Pointer to the current screen SIB
    63 00000088 00                  <1> bSavScr     db 0    ;Set if we are in the screen saving procedure
    64                              <1> 
    65 00000089 000000000000000000- <1> sibArray    db maxSib*screenSib_size dup (0)   ;Set our screenSIB array
    65 00000092 000000000000000000- <1>
    65 0000009B 000000000000000000- <1>
    65 000000A4 000000000000000000- <1>
    65 000000AD 000000000000000000- <1>
    65 000000B6 000000000000000000- <1>
    65 000000BF 000000000000000000- <1>
    65 000000C8 000000000000000000- <1>
    65 000000D1 000000000000000000- <1>
    65 000000DA 000000000000000000- <1>
    65 000000E3 000000000000000000- <1>
    65 000000EC 000000000000000000- <1>
    65 000000F5 000000000000000000- <1>
    65 000000FE 000000000000000000- <1>
    65 00000107 000000000000000000- <1>
    65 00000110 000000000000000000- <1>
    65 00000119 0000000000000000    <1>
    66                              <1> 
    67                              <1> 
    68                              <1> myIdt:
    69 00000121 0000                <1> .limit  dw 0
    70 00000123 0000000000000000    <1> .base   dq 0
    11                                  %include "./src/mccode.asm"
     1                              <1> ;This driver is designed to work in the MDOS environment. 
     2                              <1> 
     3                              <1> strategy:
     4                              <1> ;DOS calls this function with rbx=Ptr to request header.
     5                              <1> ;Rather than saving the 
     6 0000012B 50                  <1>     push rax
     7 0000012C 53                  <1>     push rbx
     8 0000012D 51                  <1>     push rcx
     9 0000012E 52                  <1>     push rdx
    10 0000012F 56                  <1>     push rsi
    11 00000130 57                  <1>     push rdi
    12 00000131 55                  <1>     push rbp
    13 00000132 4150                <1>     push r8 ;Use r8 as the static pointer to the request packet!
    14 00000134 4989D8              <1>     mov r8, rbx 
    15 00000137 6641C740030000      <1>     mov word [r8 + drvReqHdr.status], 0    ;Ensure status clear (should be!)
    16 0000013E 410FB64002          <1>     movzx eax, byte [r8 + drvReqHdr.cmdcde]
    17 00000143 3D14000000          <1>     cmp eax, funcTblE   
    18 00000148 7321                <1>     jae short unkCmd       ;If cmdcde is past the end of the table, error!
    19 0000014A 488D1DD1FEFFFF      <1>     lea rbx, funcTbl        ;Else get pointer to function
    20 00000151 0FB71443            <1>     movzx edx, word [rbx + 2*rax]   
    21 00000155 4801D3              <1>     add rbx, rdx
    22 00000158 FFD3                <1>     call rbx        
    23                              <1> exit:
    24 0000015A 66418148030001      <1>     or word [r8 + drvReqHdr.status], drvDonStatus    ;Set done bit!
    25                              <1> .err:
    26 00000161 4158                <1>     pop r8
    27 00000163 5D                  <1>     pop rbp
    28 00000164 5F                  <1>     pop rdi
    29 00000165 5E                  <1>     pop rsi
    30 00000166 5A                  <1>     pop rdx
    31 00000167 59                  <1>     pop rcx
    32 00000168 5B                  <1>     pop rbx
    33 00000169 58                  <1>     pop rax
    34                              <1> noOp:
    35                              <1>     return
    13 0000016A C3                  <2>  ret
    36                              <1> 
    37                              <1> unkCmd:
    38 0000016B B003                <1>     mov al, drvBadCmd
    39                              <1> errorExit:
    40                              <1> ;Jump to with al=Standard Error code
    41 0000016D 66B80080            <1>     mov ax, drvErrStatus    ;Set error bit, and NOT done bit!
    42 00000171 6641894003          <1>     mov word [r8 + drvReqHdr.status], ax
    43 00000176 EBE9                <1>     jmp short exit.err
    44                              <1> 
    45                              <1> read:    ;Read Chars
    46 00000178 B005                <1>     mov al, 05h ;Bad request structure length?
    47 0000017A 4180382A            <1>     cmp byte [r8 + drvReqHdr.hdrlen], ioReqPkt_size
    48 0000017E 75ED                <1>     jne errorExit
    49 00000180 410FB6501A          <1>     movzx edx, byte [r8 + ioReqPkt.strtsc]  ;Get the screen number
    50 00000185 81FA07000000        <1>     cmp edx, maxScr
    51 0000018B 7607                <1>     jbe .okScrnNum
    52 0000018D B80B000000          <1>     mov eax, drvReadFault
    53 00000192 EBD9                <1>     jmp short errorExit
    54                              <1> .okScrnNum:
    55 00000194 498B780E            <1>     mov rdi, qword [r8 + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 00000198 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .readLp:
    58 0000019A 3A15DFFEFFFF        <1>     cmp dl, byte [bCurScr]
    59 000001A0 740C                <1>     je .getch   ;If the current screen is not the one requesting, freeze!
    60 000001A2 E8C0030000          <1>     call getSIB ;Get the ptr to the SIB for the screen number in dl.
    61 000001A7 E8A6030000          <1>     call procBlock  ;Lock using this SIB ptr as the identifier.
    62 000001AC EBEC                <1>     jmp short .readLp
    63                              <1> .getch:
    64 000001AE 413B4816            <1>     cmp ecx, dword [r8 + ioReqPkt.tfrlen]
    65 000001B2 7436                <1>     je .exit
    66 000001B4 803DA1FEFFFF00      <1>     cmp byte [bConBuf], 0   ;Does the buffer contain a zero?
    67 000001BB 7532                <1>     jnz .getScCde   ;No, get the buffer value
    68                              <1> 
    69                              <1> ;Do a simulated 36h/00h call!
    70 000001BD 53                  <1>     push rbx
    71 000001BE 52                  <1>     push rdx
    72 000001BF 31DB                <1>     xor ebx, ebx
    73 000001C1 89D8                <1>     mov eax, ebx    ;Set ah = 0
    74 000001C3 4889E2              <1>     mov rdx, rsp
    75 000001C6 668CD3              <1>     mov bx, ss
    76 000001C9 52                  <1>     push rdx
    77 000001CA 53                  <1>     push rbx
    78 000001CB 9C                  <1>     pushfq
    79 000001CC E8B9040000          <1>     call keybHdlr.readChar
    80 000001D1 5B                  <1>     pop rbx
    81 000001D2 5B                  <1>     pop rbx
    82                              <1> 
    83                              <1>     ;xor eax, eax
    84                              <1>     ;int 36h
    85 000001D3 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr? 
    86 000001D7 7502                <1>     jne .savChr
    87 000001D9 B010                <1>     mov al, 10h     ;Store ^P in al!
    88                              <1> .savChr:
    89 000001DB AA                  <1>     stosb
    90 000001DC 84C0                <1>     test al, al ;Was the ascii code stored 0?
    91 000001DE 7506                <1>     jnz .savScCde  ;No, skip storing scancode in buffer
    92 000001E0 882576FEFFFF        <1>     mov byte [bConBuf], ah  ;Save scancode
    93                              <1> .savScCde:
    94 000001E6 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    95 000001E8 EBB0                <1>     jmp short .readLp
    96                              <1> .exit:
    97 000001EA 41894816            <1>     mov dword [r8 + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    98                              <1>     return
    13 000001EE C3                  <2>  ret
    99                              <1> .getScCde:
   100 000001EF 8A0567FEFFFF        <1>     mov al, byte [bConBuf]  ;Get the buffer value
   101 000001F5 C60560FEFFFF00      <1>     mov byte [bConBuf], 0   ;Reset the buffer value
   102 000001FC EBDD                <1>     jmp short .savChr
   103                              <1> 
   104                              <1> ndRead:  ;Non destructive read chars
   105 000001FE B005                <1>     mov al, 05h ;Bad request structure length?
   106 00000200 4180380E            <1>     cmp byte [r8 + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   107 00000204 0F8563FFFFFF        <1>     jne errorExit
   108 0000020A 410FB6501A          <1>     movzx edx, byte [r8 + ioReqPkt.strtsc]  ;Get the screen number
   109 0000020F 81FA07000000        <1>     cmp edx, maxScr
   110 00000215 760A                <1>     jbe .okScrnNum
   111 00000217 B80B000000          <1>     mov eax, drvReadFault
   112 0000021C E94CFFFFFF          <1>     jmp errorExit
   113                              <1> .okScrnNum:
   114 00000221 3A1558FEFFFF        <1>     cmp dl, byte [bCurScr]  ;If not current screen, no char available!
   115 00000227 7526                <1>     jne .noChar
   116 00000229 8A052DFEFFFF        <1>     mov al, byte [bConBuf]
   117 0000022F 84C0                <1>     test al, al ;If this is not 0, there is a char in the buffer!
   118 00000231 7517                <1>     jnz .charFnd
   119 00000233 B401                <1>     mov ah, 01h         ;Get BIOS key existance status
   120 00000235 CD36                <1>     int 36h
   121 00000237 7416                <1>     jz .noChar          ;If zero clear => no key in buffer
   122                              <1>     ;Else, Keystroke available
   123 00000239 6685C0              <1>     test ax, ax         ;If this is null, pull from the buffer
   124 0000023C 7504                <1>     jnz .notNul         
   125 0000023E CD36                <1>     int 36h             ;Calls blocking getch. Pulls the null.
   126 00000240 EBBC                <1>     jmp short ndRead    ;Now go again...
   127                              <1> .notNul:
   128 00000242 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr?
   129 00000246 7502                <1>     jne .charFnd
   130 00000248 B010                <1>     mov al, 10h     ;Report ^P
   131                              <1> .charFnd:
   132 0000024A 4188400D            <1>     mov byte [r8 + ndInNoWaitPkt.retbyt], al   ;Move char in al
   133                              <1>     return
    13 0000024E C3                  <2>  ret
   134                              <1> .noChar: ;No keystroke available
   135 0000024F 6641C740030002      <1>     mov word [r8 + ndInNoWaitPkt.status], drvBsyStatus   ;Set busy bit
   136                              <1>     return
    13 00000256 C3                  <2>  ret
   137                              <1> 
   138                              <1> inStatus:         ;Get Input Status
   139 00000257 B005                <1>     mov al, 05h ;Bad request structure length?
   140 00000259 4180380D            <1>     cmp byte [r8 + drvReqHdr.hdrlen], statusReqPkt_size
   141 0000025D 0F850AFFFFFF        <1>     jne errorExit
   142                              <1>     return ;Exit, device ready
    13 00000263 C3                  <2>  ret
   143                              <1> 
   144                              <1> flushInBuf:   ;Flush Input Buffers
   145 00000264 B005                <1>     mov al, 05h ;Bad request structure length?
   146 00000266 4180380D            <1>     cmp byte [r8 + drvReqHdr.hdrlen], statusReqPkt_size
   147 0000026A 0F85FDFEFFFF        <1>     jne errorExit
   148 00000270 410FB6501A          <1>     movzx edx, byte [r8 + ioReqPkt.strtsc]  ;Get the screen number
   149 00000275 81FA07000000        <1>     cmp edx, maxScr
   150 0000027B 760A                <1>     jbe .okScrnNum
   151 0000027D B80B000000          <1>     mov eax, drvReadFault
   152 00000282 E9E6FEFFFF          <1>     jmp errorExit
   153                              <1> .okScrnNum:
   154 00000287 3A15F2FDFFFF        <1>     cmp dl, byte [bCurScr]
   155 0000028D 740C                <1>     je .cleanBuf   ;If the current screen is not the one requesting, freeze!
   156 0000028F E8D3020000          <1>     call getSIB ;Get the ptr to the SIB for the screen number in dl.
   157 00000294 E8B9020000          <1>     call procBlock  ;Lock using this SIB ptr as the identifier.
   158 00000299 EBEC                <1>     jmp short .okScrnNum
   159                              <1> .cleanBuf:
   160 0000029B C605BAFDFFFF00      <1>     mov byte [bConBuf], 0   ;Clear buffer
   161                              <1> .cfib0:
   162 000002A2 B800010000          <1>     mov eax, 0100h  ;Get buffer status
   163 000002A7 CD36                <1>     int 36h
   164                              <1>     retz            ;If zero clear => no more keys to read
    23                              <2> cret z
    17 000002A9 7501                <3>  j%-1 short %%a
    18                              <3>  return
    13 000002AB C3                  <4>  ret
    19                              <3> %%a:
   165 000002AC 31C0                <1>     xor eax, eax
   166 000002AE CD36                <1>     int 36h ;Read key to flush from buffer
   167 000002B0 EBF0                <1>     jmp short .cfib0
   168                              <1> 
   169                              <1> write:   ;Write Chars
   170 000002B2 B005                <1>     mov al, 05h ;Bad request structure length?
   171 000002B4 4180382A            <1>     cmp byte [r8 + drvReqHdr.hdrlen], ioReqPkt_size
   172 000002B8 0F85AFFEFFFF        <1>     jne errorExit
   173 000002BE 4181781600000000    <1>     cmp dword [r8 + ioReqPkt.tfrlen], 0
   174 000002C6 745D                <1>     je .exit
   175 000002C8 410FB6501A          <1>     movzx edx, byte [r8 + ioReqPkt.strtsc]  ;Get the screen number
   176 000002CD 81FA07000000        <1>     cmp edx, maxScr
   177 000002D3 760A                <1>     jbe .okScrnNum
   178 000002D5 B80A000000          <1>     mov eax, drvWriteFault
   179 000002DA E98EFEFFFF          <1>     jmp errorExit
   180                              <1> .okScrnNum:
   181 000002DF 498B700E            <1>     mov rsi, qword [r8 + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   182 000002E3 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   183                              <1> .writeLp:
   184 000002E5 3A1594FDFFFF        <1>     cmp dl, byte [bCurScr]
   185 000002EB 740C                <1>     je .chkScrn ;If the current screen is not the one requesting, freeze!
   186 000002ED E875020000          <1>     call getSIB ;Get the ptr to the SIB for the screen number in dl.
   187                              <1> .block:
   188 000002F2 E85B020000          <1>     call procBlock  ;Lock using this SIB ptr as the identifier.
   189 000002F7 EBEC                <1>     jmp short .writeLp
   190                              <1> .chkScrn:   ;Check if the screen is frozen!
   191 000002F9 488B1D80FDFFFF      <1>     mov rbx, qword [pCurSib]
   192 00000300 F603FF              <1>     test byte [rbx + sib.bFrozenFlg], -1
   193 00000303 75ED                <1>     jnz .block  ;Cant output if this flag is 0! Block on the SIB ptr.
   194 00000305 F6057CFDFFFFFF      <1>     test byte [bSavScr], -1 ;If set, we are in the middle of a save!
   195 0000030C 7409                <1>     jz .outch
   196 0000030E 488D1D73FDFFFF      <1>     lea rbx, bSavScr    ;Block on the bSavScr byte
   197 00000315 EBDB                <1>     jmp short .block
   198                              <1> .outch: 
   199 00000317 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   200 00000318 E80D000000          <1>     call outch ;Fast print char
   201 0000031D FFC1                <1>     inc ecx
   202 0000031F 413B4816            <1>     cmp ecx, dword [r8 + ioReqPkt.tfrlen]
   203 00000323 75C0                <1>     jne .writeLp  ;keep printing until all chars printed
   204                              <1> .exit:
   205 00000325 41894816            <1>     mov dword [r8 + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   206                              <1>     return
    13 00000329 C3                  <2>  ret
   207                              <1> outch:
   208                              <1> ;Prints the char passed in al, with 
   209 0000032A 50                  <1>     push rax
   210 0000032B 53                  <1>     push rbx
   211 0000032C B40E                <1>     mov ah, 0Eh
   212 0000032E CD30                <1>     int 30h
   213 00000330 5B                  <1>     pop rbx
   214 00000331 58                  <1>     pop rax
   215                              <1>     return
    13 00000332 C3                  <2>  ret
   216                              <1> ; -------------------- NEW IOCTL FUNCTIONS -------------------- 
   217                              <1> ioctl:
   218 00000333 80FD03              <1>     cmp ch, 03h     ;Is this a CON IOCTL request?
   219 00000336 0F852FFEFFFF        <1>     jne unkCmd
   220 0000033C 498B700F            <1>     mov rsi, qword [r8 + ioctlReqPkt.rsival]
   221 00000340 80F940              <1>     cmp cl, 40h
   222 00000343 0F8222FEFFFF        <1>     jb unkCmd
   223 00000349 80F949              <1>     cmp cl, 49h
   224 0000034C 0F8319FEFFFF        <1>     jae unkCmd
   225 00000352 0FB6C9              <1>     movzx ecx, cl
   226 00000355 81E940000000        <1>     sub ecx, 40h     ;Get table offset
   227 0000035B 488D1DE8FCFFFF      <1>     lea rbx, ioctlTbl
   228 00000362 488B0C4B            <1>     mov rcx, qword [rbx + 2*rcx]    ;Get the offset from ioctlTbl
   229 00000366 4801CB              <1>     add rbx, rcx    ;Add to the table base address
   230 00000369 FFE3                <1>     jmp rbx ;Jump to the ptr in rbx and return to the main dispatcher!
   231                              <1> 
   232                              <1> ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   233                              <1> ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   234                              <1> ; NOTE FOR FUTURE! WE WILL NEED TO SAVE SOME INFORMATION IN THE DATA AREA |
   235                              <1> ; EVEN IF USING BIOS SINCE WE NEED TO ALLOW ALL SCREENS TO HAVE SEPARATE  |
   236                              <1> ; CURSOR SHAPES! AS THINGS STAND, ALL SCREENS SHARE THE SAME CURSOR SHAPE.|
   237                              <1> ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   238                              <1> ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   239                              <1> 
   240                              <1> ioctl_ls:
   241                              <1> ;Locate SIB. 
   242                              <1> ;By locating the SIB, we are selecting the screen!
   243 0000036B 4881FE07000000      <1>     cmp rsi, maxScr 
   244 00000372 0F87C1010000        <1>     ja badSIBNum
   245 00000378 89F2                <1>     mov edx, esi    ;Get the screen number in al
   246 0000037A 3815FFFCFFFF        <1>     cmp byte [bCurScr], dl
   247 00000380 7414                <1>     je .curScr
   248 00000382 8815F7FCFFFF        <1>     mov byte [bCurScr], dl
   249 00000388 E8DA010000          <1>     call getSIB     ;Get sib ptr in rbx for screen number in dl.
   250 0000038D 48891DECFCFFFF      <1>     mov qword [pCurSib], rbx
   251 00000394 EB13                <1>     jmp short .exit
   252                              <1> .curScr:
   253                              <1> ;Here we get a pointer to the segment itself, not just the SIB
   254 00000396 C605EBFCFFFFFF      <1>     mov byte [bSavScr], -1
   255 0000039D 31C0                <1>     xor eax, eax    ;Segment to get (Segment 0, only segment!)
   256 0000039F E8E2010000          <1>     call getSibSeg  ;Get rbx -> SIB, rdi -> Segment     
   257 000003A4 31C0                <1>     xor eax, eax
   258 000003A6 668907              <1>     mov word [rdi + sibSeg.wSegSize], ax    ;We don't need a segment!
   259                              <1> .exit:
   260 000003A9 4989581F            <1>     mov qword [r8 + ioctlReqPkt.ctlptr], rbx    ;Return SIB ptr here!
   261 000003AD 49C7400F00000000    <1>     mov qword [r8 + ioctlReqPkt.rsival], 0  ;Indicate success!
   262                              <1>     return
    13 000003B5 C3                  <2>  ret
   263                              <1> 
   264                              <1> ioctl_ss:
   265                              <1> ;Save Segment of current SIB.
   266                              <1> ;Input: rsi(sil) = ZX segment number to operate on into current SIB.
   267 000003B6 4881FE01000000      <1>     cmp rsi, maxSibSeg  ;Is this equal to 1?
   268 000003BD 0F8776010000        <1>     ja badSIBNum
   269                              <1> ;Since we are saving NO data, we simply return success!
   270 000003C3 49C7400F00000000    <1>     mov qword [r8 + ioctlReqPkt.rsival], 0  ;Indicate success!
   271                              <1>     return
    13 000003CB C3                  <2>  ret
   272                              <1> 
   273                              <1> ioctl_rs:
   274                              <1> ;Restore Segment (Actually, set segment data!)
   275                              <1> ;Input: rsi(sil) = ZX segment number to operate on into current SIB.
   276                              <1> ;
   277                              <1> ;We don't per-se restore data from the SIB instead getting BIOS to do
   278                              <1> ; the screen swap for us. We change the screen number to the current 
   279                              <1> ; screen number. 
   280                              <1> ;If we send a SIB segment number of 0, we are resetting the screen.
   281                              <1> ;Else, we are simply swapping to the screen.
   282 000003CC 4881FE01000000      <1>     cmp rsi, maxSibSeg  ;Is this equal to 1?
   283 000003D3 0F8760010000        <1>     ja badSIBNum
   284                              <1> 
   285                              <1> ;Start by swapping the screen to the SIB number!
   286 000003D9 8A05A0FCFFFF        <1>     mov al, byte [bCurScr]    ;Move the screen number into al
   287 000003DF B405                <1>     mov ah, 05h     ;Set active page to al 
   288 000003E1 CD30                <1>     int 30h         ;Swap active page on the VGA!
   289                              <1> 
   290 000003E3 85F6                <1>     test esi, esi   ;If Segment 0, reset the screen totally!
   291 000003E5 7505                <1>     jnz .exit       ;Else we just wanted to swap to this screen (segment bzw.)
   292                              <1> ;Here we reset the screen!
   293 000003E7 E8B3010000          <1>     call resetScreen
   294                              <1> .exit:
   295 000003EC 49C7400F00000000    <1>     mov qword [r8 + ioctlReqPkt.rsival], 0  ;Indicate success!
   296                              <1>     return
    13 000003F4 C3                  <2>  ret
   297                              <1> 
   298                              <1> ioctl_ei:
   299                              <1> ;Renable IO
   300                              <1> ;Input: rsi(sil) = Zero extended screen number to operate on.
   301 000003F5 C6058CFCFFFF00      <1>     mov byte [bSavScr], 0   ;We are done saving the screen!
   302 000003FC 488D1D85FCFFFF      <1>     lea rbx, bSavScr    ;Thaw threads frozen during screen save!
   303 00000403 E83A010000          <1>     call procRun
   304 00000408 488B1D71FCFFFF      <1>     mov rbx, qword [pCurSib]    ;Thaw threads frozen while CurSib not current
   305                              <1>     return
    13 0000040F C3                  <2>  ret
   306                              <1> 
   307                              <1> ioctl_is:
   308                              <1> ;Initialise screen
   309                              <1> ;Input: rsi(sil) = Zero extended screen number to operate on.
   310 00000410 4881FE07000000      <1>     cmp rsi, maxScr 
   311 00000417 0F871C010000        <1>     ja badSIBNum
   312 0000041D 89F2                <1>     mov edx, esi
   313 0000041F 88155AFCFFFF        <1>     mov byte [bCurScr], dl
   314 00000425 E83D010000          <1>     call getSIB ;Get ptr to this sib in rdi
   315 0000042A 48893D4FFCFFFF      <1>     mov qword [pCurSib], rdi
   316 00000431 C60700              <1>     mov byte [rdi + sib.bFrozenFlg], 0  ;Screen not frozen!
   317                              <1> ;Reset the screen now
   318 00000434 E866010000          <1>     call resetScreen
   319 00000439 49C7400F00000000    <1>     mov qword [r8 + ioctlReqPkt.rsival], 0  ;Indicate success!
   320                              <1>     return
    13 00000441 C3                  <2>  ret
   321                              <1> 
   322                              <1> ioctl_strt:
   323                              <1> ;Start (continue) screen output
   324                              <1> ;Input: rsi(sil) = Zero extended screen number to operate on.
   325 00000442 488B1D37FCFFFF      <1>     mov rbx, qword [pCurSib]
   326 00000449 F603FF              <1>     test byte [rbx + sib.bFrozenFlg], -1 ;Set the freeze flag in SIB
   327                              <1>     retz    ;If the current screen is already thawed, just return!
    23                              <2> cret z
    17 0000044C 7501                <3>  j%-1 short %%a
    18                              <3>  return
    13 0000044E C3                  <4>  ret
    19                              <3> %%a:
   328 0000044F C60300              <1>     mov byte [rbx + sib.bFrozenFlg], 0  ;Thaw this SIB now
   329 00000452 E8EB000000          <1>     call procRun    ;And thaw any threads blocked on this SIB!
   330                              <1>     return
    13 00000457 C3                  <2>  ret
   331                              <1> 
   332                              <1> ioctl_stop:
   333                              <1> ;Stop (freeze) current screen output
   334                              <1> ;Input: rsi(sil) = Zero extended screen number to operate on.
   335 00000458 488B1D21FCFFFF      <1>     mov rbx, qword [pCurSib]
   336 0000045F C603FF              <1>     mov byte [rbx + sib.bFrozenFlg], -1 ;Set the freeze flag in SIB
   337                              <1>     return
    13 00000462 C3                  <2>  ret
   338                              <1> 
   339                              <1> ioctl_init:
   340                              <1> ;Multitasking initialisation function. Passes a datapkt ptr
   341                              <1> ; in ctlptr field.
   342 00000463 F605F4FBFFFFFF      <1>     test byte [bInMulti], -1 ;Have we already run this function?
   343 0000046A 0F84FBFCFFFF        <1>     je unkCmd
   344 00000470 498B501F            <1>     mov rdx, qword [r8 + ioctlReqPkt.ctlptr]    ;Get pktptr
   345 00000474 66813A0001          <1>     cmp word [rdx + mScrCap.wVer], 0100h
   346 00000479 0F85ECFCFFFF        <1>     jne unkCmd
   347 0000047F 66817A020D00        <1>     cmp word [rdx + mScrCap.wLen], mScrCap_size
   348 00000485 0F85E0FCFFFF        <1>     jne unkCmd
   349                              <1> ;Here we have verified we are ok! Proceed.
   350 0000048B C605CCFBFFFFFF      <1>     mov byte [bInMulti], -1     ;Now we are entering MT! Set the lock!
   351                              <1> 
   352                              <1> ;This IOCTL is equivalent to how in MTDOS, CON reports caps during drvinit.
   353 00000492 C6420408            <1>     mov byte [rdx + mScrCap.bScrNum], (maxScr + 1)
   354 00000496 488B4205            <1>     mov rax, qword [rdx + mScrCap.pDevHlp]  ;Get the devHlp pointer
   355 0000049A 488905CEFBFFFF      <1>     mov qword [pDevHlp], rax
   356                              <1> 
   357                              <1> ;Now setup the pointer to the DOSMGR ScrIoOk byte
   358 000004A1 31C0                <1>     xor eax, eax    ;Get var 0 (ScrIoOk)
   359 000004A3 B901000000          <1>     mov ecx, 1      ;Length 1
   360 000004A8 BA10000000          <1>     mov edx, DevHlp_GetDOSVar     ;Get ScrIoOk Var
   361 000004AD FF15BCFBFFFF        <1>     call qword [pDevHlp]
   362 000004B3 488905BDFBFFFF      <1>     mov qword [pScrIoOk], rax   ;Store the pointer now!
   363                              <1> 
   364                              <1> ;Now install the multitasking keyboard interrupt routines!
   365                              <1> ;DO IRQ1
   366 000004BA B8F1000000          <1>     mov eax, 0F1h   ;Get IRQ1 handler in rbx
   367 000004BF E854020000          <1>     call getIntHdlr
   368 000004C4 48891D94FBFFFF      <1>     mov qword [pOldKbdIntr], rbx
   369 000004CB 488D152B010000      <1>     lea rdx, keybIntr
   370 000004D2 B8F1000000          <1>     mov eax, 0F1h
   371 000004D7 E812020000          <1>     call installInterrupt
   372                              <1> ;DO Int 36h
   373 000004DC B836000000          <1>     mov eax, 036h   ;Get Int 36h handler in rbx
   374 000004E1 E832020000          <1>     call getIntHdlr
   375 000004E6 48891D7AFBFFFF      <1>     mov qword [pOldKbdHdlr], rbx
   376 000004ED 488D1587010000      <1>     lea rdx, keybHdlr
   377 000004F4 B836000000          <1>     mov eax, 036h
   378 000004F9 E8F0010000          <1>     call installInterrupt
   379                              <1>     return
    13 000004FE C3                  <2>  ret
   380                              <1> 
   381                              <1> ioctl_deinst:
   382                              <1> ;Reset the internal vars to set CON back to single tasking mode!
   383 000004FF FA                  <1>     cli
   384 00000500 488B1558FBFFFF      <1>     mov rdx, qword [pOldKbdIntr]
   385 00000507 B8F1000000          <1>     mov eax, 0F1h
   386 0000050C E8DD010000          <1>     call installInterrupt
   387 00000511 488B154FFBFFFF      <1>     mov rdx, qword [pOldKbdHdlr]
   388 00000518 B836000000          <1>     mov eax, 036h
   389 0000051D E8CC010000          <1>     call installInterrupt
   390 00000522 488D0541FCFFFF      <1>     lea rax, noOp
   391 00000529 4889053FFBFFFF      <1>     mov qword [pDevHlp], rax    ;Restore the do nothing function!
   392 00000530 FB                  <1>     sti
   393 00000531 C60526FBFFFF00      <1>     mov byte [bInMulti], 0  ;Back out of Multitasking
   394                              <1>     return
    13 00000538 C3                  <2>  ret
   395                              <1> 
   396                              <1> badSIBNum:
   397                              <1> ;Jumped to to indicate a bad SIB or segment number!
   398 00000539 49C7400F01000000    <1>     mov qword [r8 + ioctlReqPkt.rsival], 1 
   399                              <1>     return
    13 00000541 C3                  <2>  ret
   400                              <1> 
   401                              <1> procRun:
   402                              <1> ;Input: rbx = qword identifier for the block tasks to unblock.
   403 00000542 53                  <1>     push rbx
   404 00000543 52                  <1>     push rdx
   405 00000544 BA0A000000          <1>     mov edx, DevHlp_ProcRun
   406 00000549 FF1520FBFFFF        <1>     call qword [pDevHlp]
   407 0000054F 5A                  <1>     pop rdx
   408 00000550 5B                  <1>     pop rbx
   409                              <1>     return
    13 00000551 C3                  <2>  ret
   410                              <1> 
   411                              <1> procBlock:
   412                              <1> ;Input: rbx = qword identifier to block the thread on.
   413 00000552 53                  <1>     push rbx
   414 00000553 51                  <1>     push rcx
   415 00000554 52                  <1>     push rdx
   416 00000555 BA09000000          <1>     mov edx, DevHlp_ProcBlock   ;ProcBlock, Sleep is not interruptable
   417 0000055A 31C9                <1>     xor ecx, ecx    ;No timeout!
   418 0000055C FA                  <1>     cli         ;Stop Interrupts to prevent race conditions
   419 0000055D FF150CFBFFFF        <1>     call qword [pDevHlp]
   420 00000563 5A                  <1>     pop rdx
   421 00000564 59                  <1>     pop rcx
   422 00000565 5B                  <1>     pop rbx
   423                              <1>     return
    13 00000566 C3                  <2>  ret
   424                              <1> 
   425                              <1> ;----------------------------------------------------------
   426                              <1> ; Internal utility functions
   427                              <1> ;----------------------------------------------------------
   428                              <1> 
   429                              <1> getSIB:
   430                              <1> ;Input: edx (zx from dl) = Screen number to get SIB for
   431                              <1> ;Output: rbx -> SIB for that screen number
   432 00000567 488D1D1BFBFFFF      <1>     lea rbx, sibArray
   433 0000056E 85D2                <1>     test edx, edx
   434                              <1>     retz
    23                              <2> cret z
    17 00000570 7501                <3>  j%-1 short %%a
    18                              <3>  return
    13 00000572 C3                  <4>  ret
    19                              <3> %%a:
   435 00000573 50                  <1>     push rax
   436 00000574 51                  <1>     push rcx
   437 00000575 52                  <1>     push rdx
   438 00000576 89D0                <1>     mov eax, edx
   439 00000578 B913000000          <1>     mov ecx, screenSib_size ;Get screen Sib size
   440 0000057D F7E1                <1>     mul ecx ;eax <- eax*ecx
   441 0000057F 4801C3              <1>     add rbx, rax
   442 00000582 5A                  <1>     pop rdx
   443 00000583 59                  <1>     pop rcx
   444 00000584 58                  <1>     pop rax
   445                              <1>     return
    13 00000585 C3                  <2>  ret
   446                              <1> 
   447                              <1> getSibSeg:
   448                              <1> ;Get the chosen segment from the current SIB
   449                              <1> ;Input: eax (zx from ax) = Segment number to get
   450                              <1> ;Output: rbx -> Current SIB
   451                              <1> ;        rdi -> Chosen SIB segment
   452 00000586 488B1DF3FAFFFF      <1>     mov rbx, qword [pCurSib]
   453 0000058D BF0C000000          <1>     mov edi, sibSeg_size ;Get the size of the sibseg
   454 00000592 F7E7                <1>     mul edi     ;Get the segment offset in the segment block in eax
   455 00000594 0FB77B01            <1>     movzx edi, word [rbx + sib.wOffSeg] ;
   456 00000598 4801C7              <1>     add rdi, rax    ;Turn into an offset into the SIB
   457 0000059B 4801DF              <1>     add rdi, rbx    ;Turn into a proper pointer
   458                              <1>     return
    13 0000059E C3                  <2>  ret
   459                              <1> 
   460                              <1> 
   461                              <1> resetScreen:
   462                              <1> ;Resets the current screen (Blanks).
   463 0000059F 0FB61DD9FAFFFF      <1>     movzx ebx, byte [bCurScr]    ;Move the screen number into ebx
   464 000005A6 53                  <1>     push rbx    ;Save the screen number on stack
   465 000005A7 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   466 000005AA FECA                <1>     dec dl
   467 000005AC B619                <1>     mov dh, 25  ;Number of rows is standard
   468 000005AE 31C0                <1>     xor eax, eax
   469 000005B0 89C1                <1>     mov ecx, eax
   470 000005B2 B707                <1>     mov bh, 7   ;Screen attributes
   471 000005B4 B406                <1>     mov ah, 6   ;Scroll
   472 000005B6 CD30                <1>     int 30h
   473                              <1> 
   474 000005B8 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   475 000005BA 5B                  <1>     pop rbx     ;Get back the screen number
   476 000005BB B402                <1>     mov ah, 2   ;Set cursor position!
   477 000005BD CD30                <1>     int 30h
   478                              <1>     return
    13 000005BF C3                  <2>  ret
   479                              <1> ;--------------------------------------------------------------
   480                              <1> ;------------- Driver built-in Interrupt Routines -------------
   481                              <1> ;--------------------------------------------------------------
   482                              <1> fastOutput:         ;This CON driver supports Int 29h
   483                              <1> ;Called with char to transfer in al
   484 000005C0 E865FDFFFF          <1>     call outch
   485 000005C5 48CF                <1>     iretq
   486                              <1> 
   487                              <1> ctrlBreak:
   488                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK.
   489 000005C7 50                  <1>     push rax
   490 000005C8 52                  <1>     push rdx
   491                              <1> ;Simulate an interrupt call to the BIOS to pull the key out
   492                              <1> ; from the buffer.
   493 000005C9 4889E2              <1>     mov rdx, rsp
   494 000005CC 31C0                <1>     xor eax, eax
   495 000005CE 668CD0              <1>     mov ax, ss
   496 000005D1 50                  <1>     push rax
   497 000005D2 52                  <1>     push rdx
   498 000005D3 9C                  <1>     pushfq
   499 000005D4 668CC8              <1>     mov ax, cs
   500 000005D7 50                  <1>     push rax
   501 000005D8 31C0                <1>     xor eax, eax    ;Getch, BIOS Places a zero word in the keyboard buffer
   502 000005DA FF1587FAFFFF        <1>     call qword [pOldKbdHdlr]    ;Pull the zero word out of the keyb buffer
   503 000005E0 B803000000          <1>     mov eax, 03h                ;Replace it with a ^C char
   504 000005E5 BA05000000          <1>     mov edx, DevHlp_ConsInputFilter
   505 000005EA FF157FFAFFFF        <1>     call qword [pDevHlp]        ;Ask DOS if it wants to eat the ^C
   506 000005F0 7407                <1>     jz .exit                    ;Jump if DOS ate ^C :(
   507 000005F2 C60563FAFFFF03      <1>     mov byte [bConBuf], 03h     ;Place a ^C in buffer
   508                              <1> .exit:
   509 000005F9 5A                  <1>     pop rdx
   510 000005FA 58                  <1>     pop rax
   511 000005FB 48CF                <1>     iretq
   512                              <1> 
   513                              <1> keybIntr:        ;New Keyboard Interrupt Hdlr
   514 000005FD 50                  <1>     push rax        ;Save RAX as a trashed reg
   515 000005FE 52                  <1>     push rdx
   516                              <1> ;Simulate an IRQ entry to old kbdHldr
   517 000005FF 4889E2              <1>     mov rdx, rsp
   518 00000602 31C0                <1>     xor eax, eax
   519 00000604 668CD0              <1>     mov ax, ss
   520 00000607 50                  <1>     push rax
   521 00000608 52                  <1>     push rdx
   522 00000609 9C                  <1>     pushfq
   523 0000060A 668CC8              <1>     mov ax, cs
   524 0000060D 50                  <1>     push rax
   525 0000060E FF154BFAFFFF        <1>     call qword [pOldKbdIntr]    ;Do the SCP/BIOS kbd handler code!
   526                              <1> 
   527 00000614 4889E2              <1>     mov rdx, rsp
   528 00000617 31C0                <1>     xor eax, eax
   529 00000619 668CD0              <1>     mov ax, ss
   530 0000061C 50                  <1>     push rax
   531 0000061D 52                  <1>     push rdx
   532 0000061E 9C                  <1>     pushfq
   533 0000061F 668CC8              <1>     mov ax, cs
   534 00000622 50                  <1>     push rax
   535 00000623 B800010000          <1>     mov eax, 0100h              ;Now read ahead, under our handler
   536 00000628 FF1539FAFFFF        <1>     call qword [pOldKbdHdlr]    ;Gets the SC/ASCII pair in ax
   537 0000062E BA05000000          <1>     mov edx, DevHlp_ConsInputFilter
   538 00000633 FF1536FAFFFF        <1>     call qword [pDevHlp]
   539 00000639 7519                <1>     jnz .keepChar
   540                              <1>     ;Else remove the char from the buffer
   541 0000063B 4889E2              <1>     mov rdx, rsp
   542 0000063E 31C0                <1>     xor eax, eax
   543 00000640 668CD0              <1>     mov ax, ss
   544 00000643 50                  <1>     push rax
   545 00000644 52                  <1>     push rdx
   546 00000645 9C                  <1>     pushfq
   547 00000646 668CC8              <1>     mov ax, cs
   548 00000649 50                  <1>     push rax
   549 0000064A 31C0                <1>     xor eax, eax
   550 0000064C FF1515FAFFFF        <1>     call qword [pOldKbdHdlr]    ;Gets the SC/ASCII pair in ax
   551 00000652 EB23                <1>     jmp short .exit
   552                              <1> .keepChar:
   553 00000654 FA                  <1>     cli
   554 00000655 F60501FAFFFFFF      <1>     test byte [bKeybWait], -1  
   555 0000065C 7419                <1>     jz .exit
   556 0000065E 53                  <1>     push rbx
   557 0000065F 51                  <1>     push rcx
   558 00000660 488D1DF6F9FFFF      <1>     lea rbx, bKeybWait  ;Run all processes with this identifier
   559 00000667 C60300              <1>     mov byte [rbx], 0   ;Clear the flag first
   560 0000066A BA0A000000          <1>     mov edx, DevHlp_ProcRun  ;ProcRun
   561 0000066F FF15FAF9FFFF        <1>     call qword [pDevHlp]
   562 00000675 59                  <1>     pop rcx
   563 00000676 5B                  <1>     pop rbx
   564                              <1> .exit:
   565 00000677 5A                  <1>     pop rdx
   566 00000678 58                  <1>     pop rax
   567 00000679 48CF                <1>     iretq
   568                              <1> 
   569                              <1> 
   570                              <1> keybHdlr:   ;Int 36h
   571 0000067B 84E4                <1>     test ah, ah
   572 0000067D 740B                <1>     je .readChar
   573 0000067F 80FC01              <1>     cmp ah, 1
   574 00000682 7455                <1>     je .lookahead
   575 00000684 FF25DDF9FFFF        <1>     jmp qword [pOldKbdHdlr]
   576                              <1> .readChar:
   577 0000068A 50                  <1>     push rax    ;Push original function number on the stack
   578 0000068B 53                  <1>     push rbx
   579 0000068C 51                  <1>     push rcx
   580 0000068D 52                  <1>     push rdx
   581                              <1> .readChLp:
   582 0000068E 488B1DE2F9FFFF      <1>     mov rbx, qword [pScrIoOk]
   583 00000695 F603FF              <1>     test byte [rbx], -1
   584 00000698 7507                <1>     jnz .okToRead
   585 0000069A E8B3FEFFFF          <1>     call procBlock
   586 0000069F EBED                <1>     jmp short .readChLp ;Check again!
   587                              <1> .okToRead:
   588                              <1> ;Now we simulate a call into 36h/AH=01h - Get keyboard buffer status
   589 000006A1 FA                  <1>     cli
   590 000006A2 4889E2              <1>     mov rdx, rsp
   591 000006A5 31C0                <1>     xor eax, eax
   592 000006A7 668CD0              <1>     mov ax, ss
   593 000006AA 50                  <1>     push rax
   594 000006AB 52                  <1>     push rdx
   595 000006AC 9C                  <1>     pushfq
   596 000006AD 668CC8              <1>     mov ax, cs
   597 000006B0 50                  <1>     push rax
   598 000006B1 B800010000          <1>     mov eax, 0100h  ;Get the keyb status
   599 000006B6 FF15ABF9FFFF        <1>     call qword [pOldKbdHdlr]    ;Interrupts remain set on return
   600 000006BC 7511                <1>     jnz .doCharRead
   601                              <1> ;If the char isn't there, we gotta pblock until it is.
   602 000006BE 488D1D98F9FFFF      <1>     lea rbx, bKeybWait
   603 000006C5 C603FF              <1>     mov byte [rbx], -1
   604 000006C8 E885FEFFFF          <1>     call procBlock
   605 000006CD EBBF                <1>     jmp short .readChLp ;Check again with CLI set!
   606                              <1> .doCharRead:
   607 000006CF 5A                  <1>     pop rdx
   608 000006D0 59                  <1>     pop rcx
   609 000006D1 5B                  <1>     pop rbx
   610 000006D2 58                  <1>     pop rax
   611                              <1> .goKbd:
   612 000006D3 FF258EF9FFFF        <1>     jmp qword [pOldKbdHdlr]
   613                              <1> .lookahead:
   614 000006D9 53                  <1>     push rbx
   615 000006DA 488B1D96F9FFFF      <1>     mov rbx, qword [pScrIoOk]   ;Can we check?
   616 000006E1 F603FF              <1>     test byte [rbx], -1
   617 000006E4 5B                  <1>     pop rbx
   618 000006E5 75EC                <1>     jnz .goKbd  ;If we can, do it!
   619 000006E7 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF of flags
   620 000006EC 48CF                <1>     iretq
   621                              <1> 
   622                              <1> installInterrupt:
   623                              <1> ;Writes the interrupt in the right place in the table
   624                              <1>     ;al = Interrupt number
   625                              <1>     ;rdx -> Handler to install
   626 000006EE 0F010D2CFAFFFF      <1>     sidt [myIdt]
   627 000006F5 0FB6C0              <1>     movzx eax, al
   628 000006F8 4892                <1>     xchg rdx, rax
   629 000006FA 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
   630 000006FE 4803151EFAFFFF      <1>     add rdx, qword [myIdt.base]    
   631 00000705 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
   632 00000708 48C1E810            <1>     shr rax, 10h    ;Bring next word low
   633 0000070C 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
   634 00000710 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
   635 00000714 894208              <1>     mov dword [rdx + 8], eax
   636 00000717 C3                  <1>     ret
   637                              <1> getIntHdlr:
   638                              <1> ;Gets an interrupt value. 
   639                              <1> ;Input: al = Interrupt number
   640                              <1> ;Output: rbx = Interrupt Vector
   641 00000718 50                  <1>     push rax
   642 00000719 B802120000          <1>     mov eax, 1202h  ;Get Interrupt handler in rbx
   643 0000071E CD2F                <1>     int 2Fh
   644 00000720 58                  <1>     pop rax
   645                              <1>     return
    13 00000721 C3                  <2>  ret
   646                              <1>     ;sidt [myIdt]
   647                              <1>     ;movzx eax, al
   648                              <1>     ;shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   649                              <1>     ;add rax, qword [myIdt.base]    
   650                              <1>     ;xor ebx, ebx
   651                              <1>     ;mov ebx, dword [rax + 8]    ;Get bits 63...32
   652                              <1>     ;shl rbx, 10h    ;Push the high dword high
   653                              <1>     ;mov bx, word [rax + 6]      ;Get bits 31...16
   654                              <1>     ;shl rbx, 10h    ;Push word 2 into posiiton
   655                              <1>     ;mov bx, word [rax]          ;Get bits 15...0
   656                              <1>     ;return
   657                              <1> 
   658                              <1> ;------------------ EJECT POINT ------------------
   659                              <1> 
   660                              <1> init:
   661                              <1> ;Start by hooking int 3Bh, int 29h and 0F1h (IRQ1) as part of the CON driver
   662                              <1> ;DO FASTOUT
   663 00000722 488D1597FEFFFF      <1>     lea rdx, fastOutput
   664 00000729 B829000000          <1>     mov eax, 29h
   665 0000072E E8BBFFFFFF          <1>     call installInterrupt
   666                              <1> ;DO CTRL+BREAK
   667 00000733 488D158DFEFFFF      <1>     lea rdx, ctrlBreak
   668 0000073A B83B000000          <1>     mov eax, 3Bh
   669 0000073F E8AAFFFFFF          <1>     call installInterrupt
   670                              <1> .ci0:
   671 00000744 B401                <1>     mov ah, 01      ;Get buffer status
   672 00000746 CD36                <1>     int 36h
   673 00000748 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   674 0000074A 30E4                <1>     xor ah, ah
   675 0000074C CD36                <1>     int 36h ;Read key to flush from buffer
   676 0000074E EBF4                <1>     jmp short .ci0
   677                              <1> .ci1:
   678 00000750 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   679 00000755 CD30                <1>     int 30h
   680 00000757 B402                <1>     mov ah, 02h
   681 00000759 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   682 0000075B 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   683 0000075D CD30                <1>     int 30h
   684 0000075F B707                <1>     mov bh, 07h     ;Grey/Black attribs
   685 00000761 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   686 00000766 CD30                <1>     int 30h
   687                              <1> 
   688 00000768 B800510000          <1>     mov eax, 5100h
   689 0000076D CD21                <1>     int 21h             ;Get current PSP ptr
   690 0000076F 4881FB09000000      <1>     cmp rbx, 9          ;If we are being used as a Kernel driver, no msg!
   691 00000776 740E                <1>     je skipMsg
   692                              <1> ;Else, print message!
   693 00000778 488D1513000000      <1>     lea rdx, helloStr   ;Print install string
   694 0000077F B800090000          <1>     mov eax, 0900h
   695 00000784 CD21                <1>     int 21h
   696                              <1> skipMsg:
   697 00000786 488D0595FFFFFF      <1>     lea rax, init   ;Eject init
   698 0000078D 4989400E            <1>     mov qword [r8 + initReqPkt.endptr], rax
   699                              <1>     return
    13 00000791 C3                  <2>  ret
   700                              <1> 
   701 00000792 2D2D2D20496E737461- <1> helloStr    db  "--- Installing MCON Device Driver V"
   701 0000079B 6C6C696E67204D434F- <1>
   701 000007A4 4E2044657669636520- <1>
   701 000007AD 4472697665722056    <1>
   702 000007B5 302E30              <1>             db  majVers+"0",".",minVers/10+"0"
   703 000007B8 32202D2D2D0A0D24    <1>             db (minVers-minVers/10*10)+"0", " ---", 10,13,"$"
   703          ------------------  <1>  info: assembly required 1+2+2 passes

